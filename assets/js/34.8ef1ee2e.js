(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{512:function(e,t,a){"use strict";a.r(t);var r=a(20),_=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[a("strong",[e._v("作者介绍")])]),e._v(" "),a("p",[e._v("**郭俊，**专注于大数据架构，熟悉Kafka和Flume源码；熟悉Hadoop和Spark原理；精通数据（仓）库模型设计和SQL调优。公众号：大数据架构，博客：http://www.jasongj.com/，")]),e._v(" "),a("p",[a("em",[e._v("本文经作者授权转载，禁止二次转载。")])]),e._v(" "),a("p",[e._v("本节将介绍ZooKeeper的架构，并结合实例分析原子广播(ZAB)协议的原理，包括但不限于ZooKeeper的读写流程，FastLeaderElection算法的原理，ZAB如何保证Leader Failover过程中的数据一致性。")]),e._v(" "),a("h2",{attrs:{id:"zookeeper是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper是什么"}},[e._v("#")]),e._v(" ZooKeeper是什么")]),e._v(" "),a("p",[e._v("ZooKeeper是一个分布式协调服务，可用于服务发现、分布式锁、分布式领导选举、配置管理等。")]),e._v(" "),a("p",[e._v("这一切的基础，都是ZooKeeper提供了一个类似于Linux文件系统的树形结构（可认为是轻量级的内存文件系统，但只适合存少量信息，完全不适合存储大量文件或者大文件），同时提供了对于每个节点的监控与通知机制。")]),e._v(" "),a("p",[e._v("既然是一个文件系统，就不得不提ZooKeeper是如何保证数据的一致性的。本节将将介绍ZooKeeper如何保证数据一致性，如何进行领导选举，以及数据监控/通知机制的语义保证。")]),e._v(" "),a("h2",{attrs:{id:"zookeeper服务器角色"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper服务器角色"}},[e._v("#")]),e._v(" ZooKeeper服务器角色")]),e._v(" "),a("p",[e._v("ZooKeeper集群是一个基于主从复制的高可用集群，每个服务器承担如下三种角色中的一种：")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("Leader")]),e._v(" 一个ZooKeeper集群同一时间只会有一个实际工作的Leader，它会发起并维护与各Follwer及Observer间的心跳。所有的写操作必须要通过Leader完成再由Leader将写操作广播给其它服务器。")]),e._v(" "),a("li",[a("strong",[e._v("Follower")]),e._v(" 一个ZooKeeper集群可能同时存在多个Follower，它会响应Leader的心跳。Follower可直接处理并返回客户端的读请求，同时会将写请求转发给Leader处理，并且负责在Leader处理写请求时对请求进行投票。")]),e._v(" "),a("li",[a("strong",[e._v("Observer")]),e._v(" 角色与Follower类似，但是无投票权。")])]),e._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://image-blog-zx00143.test.upcdn.net/image/image-20220201204602431.png",alt:"image-20220201204602431"}}),e._v(" "),a("h2",{attrs:{id:"原子广播-zab"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原子广播-zab"}},[e._v("#")]),e._v(" 原子广播（ZAB）")]),e._v(" "),a("p",[e._v("为了保证写操作的一致性与可用性，ZooKeeper专门设计了一种名为原子广播（ZAB）的支持崩溃恢复的一致性协议。基于该协议，ZooKeeper实现了一种主从模式的系统架构来保持集群中各个副本之间的数据一致性。")]),e._v(" "),a("p",[e._v("根据ZAB协议，所有的写操作都必须通过Leader完成，Leader写入本地日志后再复制到所有的Follower节点。")]),e._v(" "),a("p",[e._v("一旦Leader节点无法工作，ZAB协议能够自动从Follower节点中重新选出一个合适的替代者，即新的Leader，该过程即为领导选举。该领导选举过程，是ZAB协议中最为重要和复杂的过程。")]),e._v(" "),a("h3",{attrs:{id:"_1、写leader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、写leader"}},[e._v("#")]),e._v(" 1、写Leader")]),e._v(" "),a("p",[e._v("通过Leader进行写操作流程如下图所示：")]),e._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"http://image-blog-zx00143.test.upcdn.net/image/image-20220201204743991.png",alt:"image-20220201204743991"}}),e._v(" "),a("p",[e._v("由上图可见，通过Leader进行写操作，主要分为五步：")]),e._v(" "),a("ol",[a("li",[e._v("客户端向Leader发起写请求")]),e._v(" "),a("li",[e._v("Leader将写请求以Proposal的形式发给所有Follower并等待ACK")]),e._v(" "),a("li",[e._v("Follower收到Leader的Proposal后返回ACK")]),e._v(" "),a("li",[e._v("Leader得到过半数的ACK（Leader对自己默认有一个ACK）后向所有的Follower和Observer发送Commit")]),e._v(" "),a("li",[e._v("Leader将处理结果返回给客户端")])]),e._v(" "),a("p",[a("strong",[e._v("这里要注意：")])]),e._v(" "),a("ul",[a("li",[e._v("Leader并不需要得到Observer的ACK，即Observer无投票权")]),e._v(" "),a("li",[e._v("Leader不需要得到所有Follower的ACK，只要收到过半的ACK即可，同时Leader本身对自己有一个ACK。上图中有4个Follower，只需其中两个返回ACK即可，因为(2+1) / (4+1) > 1/2")]),e._v(" "),a("li",[e._v("Observer虽然无投票权，但仍须同步Leader的数据从而在处理读请求时可以返回尽可能新的数据")])]),e._v(" "),a("h3",{attrs:{id:"_2、写follower-observer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、写follower-observer"}},[e._v("#")]),e._v(" 2、写Follower/Observer")]),e._v(" "),a("p",[e._v("通过Follower/Observer进行写操作流程如下图所示：")]),e._v(" "),a("p",[a("img",{attrs:{src:"http://image-blog-zx00143.test.upcdn.net/image/image-20220201204944685.png",alt:"image-20220201204944685"}})]),e._v(" "),a("p",[e._v("从上图可见：")]),e._v(" "),a("ul",[a("li",[e._v("Follower/Observer均可接受写请求，但不能直接处理，而需要将写请求转发给Leader处理")]),e._v(" "),a("li",[e._v("除了多了一步请求转发，其它流程与直接写Leader无任何区别")])]),e._v(" "),a("h3",{attrs:{id:"_3、读操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、读操作"}},[e._v("#")]),e._v(" 3、读操作")]),e._v(" "),a("p",[e._v("Leader/Follower/Observer都可直接处理读请求，从本地内存中读取数据并返回给客户端即可。")]),e._v(" "),a("p",[a("img",{attrs:{src:"http://image-blog-zx00143.test.upcdn.net/image/image-20220201222658170.png",alt:"image-20220201222658170"}})]),e._v(" "),a("p",[e._v("由于处理读请求不需要服务器之间的交互，Follower/Observer越多，整体可处理的读请求量越大，也即读性能越好。")]),e._v(" "),a("h2",{attrs:{id:"支持的领导选举算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#支持的领导选举算法"}},[e._v("#")]),e._v(" 支持的领导选举算法")]),e._v(" "),a("p",[e._v("可通过electionAlg配置项设置ZooKeeper用于领导选举的算法。")]),e._v(" "),a("p",[e._v("到3.4.10版本为止，可选项有：")]),e._v(" "),a("ul",[a("li",[e._v("0 基于UDP的LeaderElection")]),e._v(" "),a("li",[e._v("1 基于UDP的FastLeaderElection")]),e._v(" "),a("li",[e._v("2 基于UDP和认证的FastLeaderElection")]),e._v(" "),a("li",[e._v("3 "),a("strong",[e._v("基于TCP的FastLeaderElection")])])]),e._v(" "),a("p",[e._v("在3.4.10版本中，默认值为3，也即基于TCP的FastLeaderElection。另外三种算法已经被弃用，并且有计划在之后的版本中将它们彻底删除而不再支持。")]),e._v(" "),a("h2",{attrs:{id:"fastleaderelection原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fastleaderelection原理"}},[e._v("#")]),e._v(" FastLeaderElection原理")]),e._v(" "),a("h3",{attrs:{id:"_1、myid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、myid"}},[e._v("#")]),e._v(" 1、myid")]),e._v(" "),a("p",[e._v("每个ZooKeeper服务器，都需要在数据文件夹下创建一个名为myid的文件，该文件包含整个ZooKeeper集群唯一的ID（整数）。例如，某ZooKeeper集群包含三台服务器，hostname分别为zoo1、zoo2和zoo3，其myid分别为1、2和3，则在配置文件中其ID与hostname必须一一对应，如下所示。在该配置文件中，server.后面的数据即为myid")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server.1=zoo1:2888:3888\n\nserver.2=zoo2:2888:3888\n\nserver.3=zoo3:2888:3888\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("h3",{attrs:{id:"_2、zxid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、zxid"}},[e._v("#")]),e._v(" 2、zxid")]),e._v(" "),a("p",[e._v("类似于RDBMS中的事务ID，用于标识一次更新操作的Proposal ID。为了保证顺序性，该zkid必须单调递增。因此ZooKeeper使用一个64位的数来表示，高32位是Leader的epoch，从1开始，每次选出新的Leader，epoch加一。低32位为该epoch内的序号，每次epoch变化，都将低32位的序号重置。这样保证了zkid的全局递增性。")]),e._v(" "),a("h3",{attrs:{id:"_3、服务器状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、服务器状态"}},[e._v("#")]),e._v(" 3、服务器状态")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("LOOKING")]),e._v(" 不确定Leader状态。该状态下的服务器认为当前集群中没有Leader，会发起Leader选举。")]),e._v(" "),a("li",[a("strong",[e._v("FOLLOWING")]),e._v(" 跟随者状态。表明当前服务器角色是Follower，并且它知道Leader是谁。")]),e._v(" "),a("li",[a("strong",[e._v("LEADING")]),e._v(" 领导者状态。表明当前服务器角色是Leader，它会维护与Follower间的心跳。")]),e._v(" "),a("li",[a("strong",[e._v("OBSERVING")]),e._v(" 观察者状态。表明当前服务器角色是Observer，与Folower唯一的不同在于不参与选举，也不参与集群写操作时的投票。")])]),e._v(" "),a("h3",{attrs:{id:"_4、选票数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、选票数据结构"}},[e._v("#")]),e._v(" 4、选票数据结构")]),e._v(" "),a("p",[e._v("每个服务器在进行领导选举时，会发送如下关键信息：")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("logicClock")]),e._v(" 每个服务器会维护一个自增的整数，名为logicClock，它表示这是该服务器发起的第多少轮投票")]),e._v(" "),a("li",[a("strong",[e._v("state")]),e._v(" 当前服务器的状态")]),e._v(" "),a("li",[a("strong",[e._v("self_id")]),e._v(" 当前服务器的myid")]),e._v(" "),a("li",[a("strong",[e._v("self_zxid")]),e._v(" 当前服务器上所保存的数据的最大zxid")]),e._v(" "),a("li",[a("strong",[e._v("vote_id")]),e._v(" 被推举的服务器的myid")]),e._v(" "),a("li",[a("strong",[e._v("vote_zxid")]),e._v(" 被推举的服务器上所保存的数据的最大zxid")])]),e._v(" "),a("h3",{attrs:{id:"_5、投票流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、投票流程"}},[e._v("#")]),e._v(" 5、投票流程")]),e._v(" "),a("p",[a("strong",[e._v("自增选举轮次")])]),e._v(" "),a("p",[e._v("ZooKeeper规定所有有效的投票都必须在同一轮次中。每个服务器在开始新一轮投票时，会先对自己维护的logicClock进行自增操作。")]),e._v(" "),a("p",[a("strong",[e._v("初始化选票")])]),e._v(" "),a("p",[e._v("每个服务器在广播自己的选票前，会将自己的投票箱清空。该投票箱记录了所收到的选票。例：服务器2投票给服务器3，服务器3投票给服务器1，则服务器1的投票箱为(2, 3), (3, 1), (1, 1)。票箱中只会记录每一投票者的最后一票，如投票者更新自己的选票，则其它服务器收到该新选票后会在自己票箱中更新该服务器的选票。")]),e._v(" "),a("p",[a("strong",[e._v("发送初始化选票")])]),e._v(" "),a("p",[e._v("每个服务器最开始都是通过广播把票投给自己。")]),e._v(" "),a("p",[a("strong",[e._v("接收外部投票")])]),e._v(" "),a("p",[e._v("服务器会尝试从其它服务器获取投票，并记入自己的投票箱内。如果无法获取任何外部投票，则会确认自己是否与集群中其它服务器保持着有效连接。如果是，则再次发送自己的投票；如果否，则马上与之建立连接。")]),e._v(" "),a("p",[a("strong",[e._v("判断选举轮次")])]),e._v(" "),a("p",[e._v("收到外部投票后，首先会根据投票信息中所包含的logicClock来进行不同处理：")]),e._v(" "),a("ul",[a("li",[e._v("外部投票的logicClock大于自己的logicClock。说明该服务器的选举轮次落后于其它服务器的选举轮次，立即清空自己的投票箱并将自己的logicClock更新为收到的logicClock，然后再对比自己之前的投票与收到的投票以确定是否需要变更自己的投票，最终再次将自己的投票广播出去。")]),e._v(" "),a("li",[e._v("外部投票的logicClock小于自己的logicClock。当前服务器直接忽略该投票，继续处理下一个投票。")]),e._v(" "),a("li",[e._v("外部投票的logickClock与自己的相等。当时进行选票PK。")])]),e._v(" "),a("p",[a("strong",[e._v("选票PK")])]),e._v(" "),a("p",[e._v("选票PK是基于(self_id, self_zxid)与(vote_id, vote_zxid)的对比：")]),e._v(" "),a("ul",[a("li",[e._v("外部投票的logicClock大于自己的logicClock，则将自己的logicClock及自己的选票的logicClock变更为收到的logicClock")]),e._v(" "),a("li",[e._v("若logicClock一致，则对比二者的vote_zxid，若外部投票的vote_zxid比较大，则将自己的票中的vote_zxid与vote_myid更新为收到的票中的vote_zxid与vote_myid并广播出去，另外将收到的票及自己更新后的票放入自己的票箱。如果票箱内已存在(self_myid, self_zxid)相同的选票，则直接覆盖")]),e._v(" "),a("li",[e._v("若二者vote_zxid一致，则比较二者的vote_myid，若外部投票的vote_myid比较大，则将自己的票中的vote_myid更新为收到的票中的vote_myid并广播出去，另外将收到的票及自己更新后的票放入自己的票箱")])]),e._v(" "),a("p",[a("strong",[e._v("统计选票")])]),e._v(" "),a("p",[e._v("如果已经确定有过半服务器认可了自己的投票（可能是更新后的投票），则终止投票。否则继续接收其它服务器的投票。")]),e._v(" "),a("p",[a("strong",[e._v("更新服务器状态")])]),e._v(" "),a("p",[e._v("投票终止后，服务器开始更新自身状态。若过半的票投给了自己，则将自己的服务器状态更新为LEADING，否则将自己的状态更新为FOLLOWING。")]),e._v(" "),a("h2",{attrs:{id:"集群启动领导选举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群启动领导选举"}},[e._v("#")]),e._v(" 集群启动领导选举")]),e._v(" "),a("h3",{attrs:{id:"_1、初始投票给自己"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、初始投票给自己"}},[e._v("#")]),e._v(" "),a("strong",[e._v("1、初始投票给自己")])]),e._v(" "),a("p",[e._v("集群刚启动时，所有服务器的logicClock都为1，zxid都为0。各服务器初始化后，都投票给自己，并将自己的一票存入自己的票箱，如下图所示。")]),e._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://image-blog-zx00143.test.upcdn.net/image/image-20220201223832629.png",alt:"image-20220201223832629"}}),e._v(" "),a("p",[e._v("在上图中，(1, 1, 0)第一位数代表投出该选票的服务器的logicClock，第二位数代表被推荐的服务器的myid，第三位代表被推荐的服务器的最大的zxid。由于该步骤中所有选票都投给自己，所以第二位的myid即是自己的myid，第三位的zxid即是自己的zxid。")]),e._v(" "),a("p",[e._v("此时各自的票箱中只有自己投给自己的一票。")]),e._v(" "),a("h3",{attrs:{id:"_2、更新选票"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、更新选票"}},[e._v("#")]),e._v(" "),a("strong",[e._v("2、更新选票")])]),e._v(" "),a("p",[e._v("服务器收到外部投票后，进行选票PK，相应更新自己的选票并广播出去，并将合适的选票存入自己的票箱，如下图所示。")]),e._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://image-blog-zx00143.test.upcdn.net/image/image-20220201223953915.png",alt:"image-20220201223953915"}}),e._v(" "),a("p",[e._v("服务器1收到服务器2的选票（1, 2, 0）和服务器3的选票（1, 3, 0）后，由于所有的logicClock都相等，所有的zxid都相等，因此根据myid判断应该将自己的选票按照服务器3的选票更新为（1, 3, 0），并将自己的票箱全部清空，再将服务器3的选票与自己的选票存入自己的票箱，接着将自己更新后的选票广播出去。此时服务器1票箱内的选票为(1, 3)，(3, 3)。")]),e._v(" "),a("p",[e._v("同理，服务器2收到服务器3的选票后也将自己的选票更新为（1, 3, 0）并存入票箱然后广播。此时服务器2票箱内的选票为(2, 3)，(3, ,3)。")]),e._v(" "),a("p",[e._v("服务器3根据上述规则，无须更新选票，自身的票箱内选票仍为（3, 3）。")]),e._v(" "),a("p",[e._v("服务器1与服务器2更新后的选票广播出去后，由于三个服务器最新选票都相同，最后三者的票箱内都包含三张投给服务器3的选票。")]),e._v(" "),a("h3",{attrs:{id:"_3、根据选票确定角色"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、根据选票确定角色"}},[e._v("#")]),e._v(" "),a("strong",[e._v("3、根据选票确定角色")])]),e._v(" "),a("p",[e._v("根据上述选票，三个服务器一致认为此时服务器3应该是Leader。因此服务器1和2都进入FOLLOWING状态，而服务器3进入LEADING状态。之后Leader发起并维护与Follower间的心跳。")]),e._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://image-blog-zx00143.test.upcdn.net/image/image-20220201224056523.png",alt:"image-20220201224056523"}}),e._v(" "),a("h2",{attrs:{id:"follower重启选举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#follower重启选举"}},[e._v("#")]),e._v(" "),a("strong",[e._v("Follower重启选举")])]),e._v(" "),a("h3",{attrs:{id:"_1、follower重启投票给自己"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、follower重启投票给自己"}},[e._v("#")]),e._v(" 1、Follower重启投票给自己")]),e._v(" "),a("p",[e._v("Follower重启，或者发生网络分区后找不到Leader，会进入LOOKING状态并发起新的一轮投票。")]),e._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://image-blog-zx00143.test.upcdn.net/image/image-20220201224154155.png",alt:"image-20220201224154155"}}),e._v(" "),a("h3",{attrs:{id:"_2、发现已有leader后成为follower"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、发现已有leader后成为follower"}},[e._v("#")]),e._v(" 2、发现已有Leader后成为Follower")]),e._v(" "),a("p",[e._v("服务器3收到服务器1的投票后，将自己的状态LEADING以及选票返回给服务器1。服务器2收到服务器1的投票后，将自己的状态FOLLOWING及选票返回给服务器1。此时服务器1知道服务器3是Leader，并且通过服务器2与服务器3的选票可以确定服务器3确实得到了超过半数的选票。因此服务器1进入FOLLOWING状态。")]),e._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://image-blog-zx00143.test.upcdn.net/image/image-20220201224222356.png",alt:"image-20220201224222356"}}),e._v(" "),a("h2",{attrs:{id:"leader重启选举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#leader重启选举"}},[e._v("#")]),e._v(" "),a("strong",[e._v("Leader重启选举")])]),e._v(" "),a("h3",{attrs:{id:"_1、follower发起新投票"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、follower发起新投票"}},[e._v("#")]),e._v(" "),a("strong",[e._v("1、Follower发起新投票")])]),e._v(" "),a("p",[e._v("Leader（服务器3）宕机后，Follower（服务器1和2）发现Leader不工作了，因此进入LOOKING状态并发起新的一轮投票，并且都将票投给自己。")]),e._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://image-blog-zx00143.test.upcdn.net/image/image-20220201224252524.png",alt:"image-20220201224252524"}}),e._v(" "),a("h3",{attrs:{id:"_2、广播更新选票"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、广播更新选票"}},[e._v("#")]),e._v(" "),a("strong",[e._v("2、广播更新选票")])]),e._v(" "),a("p",[e._v("服务器1和2根据外部投票确定是否要更新自身的选票。这里有两种情况：")]),e._v(" "),a("ul",[a("li",[e._v("服务器1和2的zxid相同。例如在服务器3宕机前服务器1与2完全与之同步。此时选票的更新主要取决于myid的大小")]),e._v(" "),a("li",[e._v("服务器1和2的zxid不同。在旧Leader宕机之前，其所主导的写操作，只需过半服务器确认即可，而不需所有服务器确认。换句话说，服务器1和2可能一个与旧Leader同步（即zxid与之相同）另一个不同步（即zxid比之小）。此时选票的更新主要取决于谁的zxid较大")])]),e._v(" "),a("p",[e._v("在上图中，服务器1的zxid为11，而服务器2的zxid为10，因此服务器2将自身选票更新为（3, 1, 11），如下图所示。")]),e._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://image-blog-zx00143.test.upcdn.net/image/image-20220201224331812.png",alt:"image-20220201224331812"}}),e._v(" "),a("h3",{attrs:{id:"_3、选出新leader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、选出新leader"}},[e._v("#")]),e._v(" "),a("strong",[e._v("3、选出新Leader")])]),e._v(" "),a("p",[e._v("经过上一步选票更新后，服务器1与服务器2均将选票投给服务器1，因此服务器2成为Follower，而服务器1成为新的Leader并维护与服务器2的心跳。")]),e._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://image-blog-zx00143.test.upcdn.net/image/image-20220201224349358.png",alt:"image-20220201224349358"}}),e._v(" "),a("h3",{attrs:{id:"_4、旧leader恢复后发起选举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、旧leader恢复后发起选举"}},[e._v("#")]),e._v(" "),a("strong",[e._v("4、旧Leader恢复后发起选举")])]),e._v(" "),a("p",[e._v("旧的Leader恢复后，进入LOOKING状态并发起新一轮领导选举，并将选票投给自己。此时服务器1会将自己的LEADING状态及选票（3, 1, 11）返回给服务器3，而服务器2将自己的FOLLOWING状态及选票（3, 1, 11）返回给服务器3。如下图所示。")]),e._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://image-blog-zx00143.test.upcdn.net/image/image-20220201224424843.png",alt:"image-20220201224424843"}}),e._v(" "),a("h3",{attrs:{id:"_5、旧leader成为follower"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、旧leader成为follower"}},[e._v("#")]),e._v(" "),a("strong",[e._v("5、旧Leader成为Follower")])]),e._v(" "),a("p",[e._v("服务器3了解到Leader为服务器1，且根据选票了解到服务器1确实得到过半服务器的选票，因此自己进入FOLLOWING状态。")]),e._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://image-blog-zx00143.test.upcdn.net/image/image-20220201224441827.png",alt:"image-20220201224441827"}}),e._v(" "),a("h2",{attrs:{id:"commit过的数据不丢失"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commit过的数据不丢失"}},[e._v("#")]),e._v(" "),a("strong",[e._v("Commit过的数据不丢失")])]),e._v(" "),a("h3",{attrs:{id:"_1、failover前状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、failover前状态"}},[e._v("#")]),e._v(" 1、Failover前状态")]),e._v(" "),a("p",[e._v("为更好演示Leader Failover过程，本例中共使用5个ZooKeeper服务器。A作为Leader，共收到P1、P2、P3三条消息，并且Commit了1和2，且总体顺序为P1、P2、C1、P3、C2。根据顺序性原则，其它Follower收到的消息的顺序肯定与之相同。其中B与A完全同步，C收到P1、P2、C1，D收到P1、P2，E收到P1，如下图所示。")]),e._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://image-blog-zx00143.test.upcdn.net/image/image-20220201224521003.png",alt:"image-20220201224521003"}}),e._v(" "),a("p",[e._v("这里要注意：")]),e._v(" "),a("ul",[a("li",[e._v("由于A没有C3，意味着收到P3的服务器的总个数不会超过一半，也即包含A在内最多只有两台服务器收到P3。在这里A和B收到P3，其它服务器均未收到P3")]),e._v(" "),a("li",[e._v("由于A已写入C1、C2，说明它已经Commit了P1、P2，因此整个集群有超过一半的服务器，即最少三个服务器收到P1、P2。在这里所有服务器都收到了P1，除E外其它服务器也都收到了P2")])]),e._v(" "),a("h3",{attrs:{id:"_2、选出新leader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、选出新leader"}},[e._v("#")]),e._v(" "),a("strong",[e._v("2、选出新Leader")])]),e._v(" "),a("p",[e._v("旧Leader也即A宕机后，其它服务器根据上述FastLeaderElection算法选出B作为新的Leader。C、D和E成为Follower且以B为Leader后，会主动将自己最大的zxid发送给B，B会将Follower的zxid与自身zxid间的所有被Commit过的消息同步给Follower，如下图所示。")]),e._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://image-blog-zx00143.test.upcdn.net/image/image-20220201225023952.png",alt:"image-20220201225023952"}}),e._v(" "),a("p",[e._v("在上图中：")]),e._v(" "),a("ul",[a("li",[e._v("P1和P2都被A Commit，因此B会通过同步保证P1、P2、C1与C2都存在于C、D和E中")]),e._v(" "),a("li",[a("strong",[e._v("P3由于未被A Commit，同时幸存的所有服务器中P3未存在于大多数据服务器中，因此它不会被同步到其它Follower")])])]),e._v(" "),a("h3",{attrs:{id:"_3、通知follower可对外服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、通知follower可对外服务"}},[e._v("#")]),e._v(" "),a("strong",[e._v("3、通知Follower可对外服务")])]),e._v(" "),a("p",[e._v("同步完数据后，B会向D、C和E发送NEWLEADER命令并等待大多数服务器的ACK（下图中D和E已返回ACK，加上B自身，已经占集群的大多数），然后向所有服务器广播UPTODATE命令。收到该命令后的服务器即可对外提供服务。")]),e._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://image-blog-zx00143.test.upcdn.net/image/image-20220201225145225.png",alt:"image-20220201225145225"}}),e._v(" "),a("h2",{attrs:{id:"未commit过的消息对客户端不可见"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#未commit过的消息对客户端不可见"}},[e._v("#")]),e._v(" "),a("strong",[e._v("未Commit过的消息对客户端不可见")])]),e._v(" "),a("p",[a("strong",[e._v("在上例中，P3未被A Commit过，同时因为没有过半的服务器收到P3，因此B也未Commit P3（如果有过半服务器收到P3，即使A未Commit P3，B会主动Commit P3，即C3），所以它不会将P3广播出去。")])]),e._v(" "),a("p",[e._v("具体做法是，B在成为Leader后，先判断自身未Commit的消息（本例中即P3）是否存在于大多数服务器中从而决定是否要将其Commit。然后B可得出自身所包含的被Commit过的消息中的最小zxid（记为min_zxid）与最大zxid（记为max_zxid）。C、D和E向B发送自身Commit过的最大消息zxid（记为max_zxid）以及未被Commit过的所有消息（记为zxid_set）。B根据这些信息作出如下操作：")]),e._v(" "),a("ul",[a("li",[e._v("如果Follower的max_zxid与Leader的max_zxid相等，说明该Follower与Leader完全同步，无须同步任何数据")]),e._v(" "),a("li",[e._v("如果Follower的max_zxid在Leader的(min_zxid，max_zxid)范围内，Leader会通过TRUNC命令通知Follower将其zxid_set中大于Follower的max_zxid（如果有）的所有消息全部删除")])]),e._v(" "),a("p",[e._v("上述操作保证了未被Commit过的消息不会被Commit从而对外不可见。")]),e._v(" "),a("p",[e._v("上述例子中Follower上并不存在未被Commit的消息。但可考虑这种情况，如果将上述例子中的服务器数量从五增加到七，服务器F包含P1、P2、C1、P3，服务器G包含P1、P2。此时服务器F、A和B都包含P3，但是因为票数未过半，因此B作为Leader不会Commit P3，而会通过TRUNC命令通知F删除P3。如下图所示。")]),e._v(" "),a("p",[a("img",{attrs:{src:"http://image-blog-zx00143.test.upcdn.net/image/image-20220201225255057.png",alt:"image-20220201225255057"}})]),e._v(" "),a("h2",{attrs:{id:"本节总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本节总结"}},[e._v("#")]),e._v(" "),a("strong",[e._v("本节总结")])]),e._v(" "),a("ul",[a("li",[e._v("由于使用主从复制模式，所有的写操作都要由Leader主导完成，而读操作可通过任意节点完成，因此ZooKeeper读性能远好于写性能，更"),a("strong",[e._v("适合读多写少")]),e._v("的场景")]),e._v(" "),a("li",[e._v("虽然使用主从复制模式，同一时间只有一个Leader，但是Failover机制保证了集群"),a("strong",[e._v("不存在单点失败")]),e._v("（SPOF）的问题")]),e._v(" "),a("li",[e._v("ZAB协议保证了Failover过程中的"),a("strong",[e._v("数据一致性")])]),e._v(" "),a("li",[e._v("服务器收到数据后先写本地文件再进行处理，保证了"),a("strong",[e._v("数据的持久性")])])]),e._v(" "),a("h2",{attrs:{id:"基于zookeeper的分布式锁与领导选举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于zookeeper的分布式锁与领导选举"}},[e._v("#")]),e._v(" "),a("strong",[e._v("基于ZooKeeper的分布式锁与领导选举")])]),e._v(" "),a("p",[e._v("本节将结合实例演示了使用ZooKeeper实现分布式锁与领导选举的原理与具体实现方法。")]),e._v(" "),a("h3",{attrs:{id:"zookeeper节点类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper节点类型"}},[e._v("#")]),e._v(" "),a("strong",[e._v("ZooKeeper节点类型")])]),e._v(" "),a("p",[e._v("ZooKeeper 提供了一个类似于 Linux 文件系统的树形结构。该树形结构中每个节点被称为 znode ，可按如下两个维度分类：")]),e._v(" "),a("p",[a("strong",[e._v("1、Persist vs. Ephemeral")])]),e._v(" "),a("ul",[a("li",[e._v("Persist节点，一旦被创建，便不会意外丢失，即使服务器全部重启也依然存在。每个 Persist 节点即可包含数据，也可包含子节点")]),e._v(" "),a("li",[e._v("Ephemeral节点，在创建它的客户端与服务器间的 Session 结束时自动被删除。服务器重启会导致 Session 结束，因此 Ephemeral 类型的 znode 此时也会自动删除")])]),e._v(" "),a("p",[a("strong",[e._v("2、Sequence vs. Non-sequence")])]),e._v(" "),a("ul",[a("li",[e._v("Non-sequence节点，多个客户端同时创建同一 Non-sequence 节点时，只有一个可创建成功，其它匀失败。并且创建出的节点名称与创建时指定的节点名完全一样")]),e._v(" "),a("li",[e._v("Sequence节点，创建出的节点名在指定的名称之后带有10位10进制数的序号。多个客户端创建同一名称的节点时，都能创建成功，只是序号不同")])]),e._v(" "),a("h3",{attrs:{id:"zookeeper语义保证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper语义保证"}},[e._v("#")]),e._v(" "),a("strong",[e._v("ZooKeeper语义保证")])]),e._v(" "),a("p",[e._v("ZooKeeper简单高效，同时提供如下语义保证，从而使得我们可以利用这些特性提供复杂的服务。")]),e._v(" "),a("ul",[a("li",[e._v("顺序性：客户端发起的更新会按发送顺序被应用到 ZooKeeper 上")]),e._v(" "),a("li",[e._v("原子性：更新操作要么成功要么失败，不会出现中间状态")]),e._v(" "),a("li",[e._v("单一系统镜像：一个客户端无论连接到哪一个服务器都能看到完全一样的系统镜像（即完全一样的树形结构）。注：根据上文《ZooKeeper架构及FastLeaderElection机制》介绍的 ZAB 协议，写操作并不保证更新被所有的 Follower 立即确认，因此通过部分 Follower 读取数据并不能保证读到最新的数据，而部分 Follwer 及 Leader 可读到最新数据。如果一定要保证单一系统镜像，可在读操作前使用 sync 方法。")]),e._v(" "),a("li",[e._v("可靠性：一个更新操作一旦被接受即不会意外丢失，除非被其它更新操作覆盖")]),e._v(" "),a("li",[e._v("最终一致性：写操作最终（而非立即）会对客户端可见")])]),e._v(" "),a("h3",{attrs:{id:"zookeeper-watch机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper-watch机制"}},[e._v("#")]),e._v(" "),a("strong",[e._v("ZooKeeper Watch机制")])]),e._v(" "),a("p",[e._v("所有对 ZooKeeper 的读操作，都可附带一个 Watch 。一旦相应的数据有变化，该 Watch 即被触发。")]),e._v(" "),a("p",[e._v("Watch 有如下特点：")]),e._v(" "),a("ul",[a("li",[e._v("主动推送：Watch被触发时，由 ZooKeeper 服务器主动将更新推送给客户端，而不需要客户端轮询。")]),e._v(" "),a("li",[e._v("一次性：数据变化时，Watch 只会被触发一次。如果客户端想得到后续更新的通知，必须要在 Watch 被触发后重新注册一个 Watch。")]),e._v(" "),a("li",[e._v("可见性：如果一个客户端在读请求中附带 Watch，Watch 被触发的同时再次读取数据，客户端在得到 Watch 消息之前肯定不可能看到更新后的数据。换句话说，更新通知先于更新结果。")]),e._v(" "),a("li",[e._v("顺序性：如果多个更新触发了多个 Watch ，那 Watch 被触发的顺序与更新顺序一致。")])]),e._v(" "),a("h3",{attrs:{id:"分布式锁与领导选举关键点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式锁与领导选举关键点"}},[e._v("#")]),e._v(" "),a("strong",[e._v("分布式锁与领导选举关键点")])]),e._v(" "),a("p",[a("strong",[e._v("1、最多一个获取锁 / 成为Leader")])]),e._v(" "),a("p",[e._v("对于分布式锁（这里特指排它锁）而言，任意时刻，最多只有一个进程（对于单进程内的锁而言是单线程）可以获得锁。")]),e._v(" "),a("p",[e._v("对于领导选举而言，任意时间，最多只有一个成功当选为Leader。否则即出现脑裂（Split brain）")]),e._v(" "),a("p",[a("strong",[e._v("2、锁重入 / 确认自己是Leader")])]),e._v(" "),a("p",[e._v("对于分布式锁，需要保证获得锁的进程在释放锁之前可再次获得锁，即锁的可重入性。")]),e._v(" "),a("p",[e._v("对于领导选举，Leader需要能够确认自己已经获得领导权，即确认自己是Leader。")]),e._v(" "),a("p",[a("strong",[e._v("3、释放锁 / 放弃领导权")])]),e._v(" "),a("p",[e._v("锁的获得者应该能够正确释放已经获得的锁，并且当获得锁的进程宕机时，锁应该自动释放，从而使得其它竞争方可以获得该锁，从而避免出现死锁的状态。")]),e._v(" "),a("p",[e._v("领导应该可以主动放弃领导权，并且当领导所在进程宕机时，领导权应该自动释放，从而使得其它参与者可重新竞争领导而避免进入无主状态。")]),e._v(" "),a("p",[a("strong",[e._v("4、感知锁释放 / 领导权的放弃")])]),e._v(" "),a("p",[e._v("当获得锁的一方释放锁时，其它对于锁的竞争方需要能够感知到锁的释放，并再次尝试获取锁。")]),e._v(" "),a("p",[e._v("原来的Leader放弃领导权时，其它参与方应该能够感知该事件，并重新发起选举流程。")]),e._v(" "),a("h3",{attrs:{id:"非公平领导选举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非公平领导选举"}},[e._v("#")]),e._v(" "),a("strong",[e._v("非公平领导选举")])]),e._v(" "),a("p",[e._v("从上面几个方面可见，分布式锁与领导选举的技术要点非常相似，实际上其实现机制也相近。这里以领导选举为例来说明二者的实现原理，分布式锁的实现原理也几乎一致。")]),e._v(" "),a("p",[a("strong",[e._v("1、选主过程")])]),e._v(" "),a("p",[e._v("假设有三个ZooKeeper的客户端，如下图所示，同时竞争Leader。这三个客户端同时向ZooKeeper集群注册Ephemeral且Non-sequence类型的节点，路径都为 /zkroot/leader（工程实践中，路径名可自定义）。")]),e._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://image-blog-zx00143.test.upcdn.net/image/image-20220201230434309.png",alt:"image-20220201230434309"}}),e._v(" "),a("p",[e._v("如上图所示，由于是Non-sequence节点，这三个客户端只会有一个创建成功，其它节点均创建失败。此时，创建成功的客户端（即上图中的Client 1）即成功竞选为 Leader 。其它客户端（即上图中的Client 2和Client 3）此时匀为 Follower。")]),e._v(" "),a("p",[a("strong",[e._v("2、放弃领导权")])]),e._v(" "),a("p",[e._v("如果 Leader 打算主动放弃领导权，直接删除 /zkroot/leader 节点即可。")]),e._v(" "),a("p",[e._v("如果 Leader 进程意外宕机，其与 ZooKeeper 间的 Session 也结束，该节点由于是Ephemeral类型的节点，因此也会自动被删除。")]),e._v(" "),a("p",[e._v("此时 /zkroot/leader 节点不复存在，对于其它参与竞选的客户端而言，之前的 Leader 已经放弃了领导权。")]),e._v(" "),a("p",[a("strong",[e._v("3、感知领导权的放弃")])]),e._v(" "),a("p",[e._v("由上图可见，创建节点失败的节点，除了成为 Follower 以外，还会向 /zkroot/leader 注册一个 Watch ，一旦 Leader 放弃领导权，也即该节点被删除，所有的 Follower 会收到通知。")]),e._v(" "),a("p",[a("strong",[e._v("4、重新选举")])]),e._v(" "),a("p",[e._v("感知到旧 Leader 放弃领导权后，所有的 Follower 可以再次发起新一轮的领导选举，如下图所示。")]),e._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://image-blog-zx00143.test.upcdn.net/image/image-20220201230518352.png",alt:"image-20220201230518352"}}),e._v(" "),a("p",[e._v("从上图中可见：")]),e._v(" "),a("ul",[a("li",[e._v("新一轮的领导选举方法与最初的领导选举方法完全一样，都是发起节点创建请求，创建成功即为 Leader，否则为 Follower ，且 Follower 会 Watch 该节点")]),e._v(" "),a("li",[e._v("新一轮的选举结果，无法预测，与它们在第一轮选举中的顺序无关。这也是该方案被称为非公平模式的原因")])]),e._v(" "),a("p",[a("strong",[e._v("小结")])]),e._v(" "),a("ol",[a("li",[e._v("非公平模式实现简单，每一轮选举方法都完全一样")]),e._v(" "),a("li",[e._v("竞争参与方不多的情况下，效率高。每个 Follower 通过 Watch 感知到节点被删除的时间不完全一样，只要有一个 Follower 得到通知即发起竞选，即可保证当时有新的 Leader 被选出")]),e._v(" "),a("li",[e._v("给ZooKeeper 集群造成的负载大，因此扩展性差。如果有上万个客户端都参与竞选，意味着同时会有上万个写请求发送给 Zookeper。如《ZooKeeper架构》一文所述，ZooKeeper 存在单点写的问题，写性能不高。同时一旦 Leader 放弃领导权，ZooKeeper 需要同时通知上万个 Follower，负载较大。")])]),e._v(" "),a("h3",{attrs:{id:"公平领导选举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#公平领导选举"}},[e._v("#")]),e._v(" "),a("strong",[e._v("公平领导选举")])]),e._v(" "),a("p",[a("strong",[e._v("1、选主过程")])]),e._v(" "),a("p",[e._v("如下图所示，公平领导选举中，各客户端均创建 /zkroot/leader 节点，且其类型为Ephemeral与Sequence。")]),e._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://image-blog-zx00143.test.upcdn.net/image/image-20220201230641601.png",alt:"image-20220201230641601"}}),e._v(" "),a("p",[e._v("由于是Sequence类型节点，故上图中三个客户端均创建成功，只是序号不一样。此时，每个客户端都会判断自己创建成功的节点的序号是不是当前最小的。如果是，则该客户端为 Leader，否则即为 Follower。")]),e._v(" "),a("p",[e._v("在上图中，Client 1创建的节点序号为 1 ，Client 2创建的节点序号为 2，Client 3创建的节点序号为3。由于最小序号为 1 ，且该节点由Client 1创建，故Client 1为 Leader 。")]),e._v(" "),a("p",[a("strong",[e._v("2、放弃领导权")])]),e._v(" "),a("p",[e._v("Leader 如果主动放弃领导权，直接删除其创建的节点即可。")]),e._v(" "),a("p",[e._v("如果 Leader 所在进程意外宕机，其与 ZooKeeper 间的 Session 结束，由于其创建的节点为Ephemeral类型，故该节点自动被删除。")]),e._v(" "),a("p",[a("strong",[e._v("3、感知领导权的放弃")])]),e._v(" "),a("p",[e._v("与非公平模式不同，每个 Follower 并非都 Watch 由 Leader 创建出来的节点，而是 Watch 序号刚好比自己序号小的节点。")]),e._v(" "),a("p",[e._v("在上图中，总共有 1、2、3 共三个节点，因此Client 2 Watch /zkroot/leader1，Client 3 Watch /zkroot/leader2。（注：序号应该是10位数字，而非一位数字，这里为了方便，以一位数字代替）")]),e._v(" "),a("p",[e._v("一旦 Leader 宕机，/zkroot/leader1 被删除，Client 2可得到通知。此时Client 3由于 Watch 的是 /zkroot/leader2 ，故不会得到通知。")]),e._v(" "),a("h3",{attrs:{id:"重新选举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重新选举"}},[e._v("#")]),e._v(" "),a("strong",[e._v("重新选举")])]),e._v(" "),a("p",[e._v("重新选举Client 2得到 /zkroot/leader1 被删除的通知后，不会立即成为新的 Leader 。而是先判断自己的序号 2 是不是当前最小的序号。在该场景下，其序号确为最小。因此Client 2成为新的 Leader 。")]),e._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://image-blog-zx00143.test.upcdn.net/image/image-20220201230756007.png",alt:"image-20220201230756007"}}),e._v(" "),a("p",[e._v("这里要注意，如果在Client 1放弃领导权之前，Client 2就宕机了，Client 3会收到通知。此时Client 3不会立即成为Leader，而是要先判断自己的序号 3 是否为当前最小序号。很显然，由于Client 1创建的 /zkroot/leader1 还在，因此Client 3不会成为新的 Leader ，并向Client 2序号 2 前面的序号，也即 1 创建 Watch。该过程如下图所示。")]),e._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"http://image-blog-zx00143.test.upcdn.net/image/image-20220201230844655.png",alt:"image-20220201230844655"}}),e._v(" "),a("p",[a("strong",[e._v("小结")])]),e._v(" "),a("ol",[a("li",[e._v("实现相对复杂；")]),e._v(" "),a("li",[e._v("扩展性好，每个客户端都只 Watch 一个节点且每次节点被删除只须通知一个客户端；")]),e._v(" "),a("li",[e._v("旧 Leader 放弃领导权时，其它客户端根据竞选的先后顺序（也即节点序号）成为新 Leader，这也是公平模式的由来；")]),e._v(" "),a("li",[e._v("延迟相对非公平模式要高，因为它必须等待特定节点得到通知才能选出新的 Leader。")])]),e._v(" "),a("p",[e._v("[]: https://mp.weixin.qq.com/s?__biz=MzkwOTIxNDQ3OA==&mid=2247533392&idx=1&sn=8999e64a05cd06dfa63c0c3ecd3a806f&source=41#wechat_redirect")])])}),[],!1,null,null,null);t.default=_.exports}}]);