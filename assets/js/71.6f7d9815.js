(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{550:function(e,s,a){"use strict";a.r(s);var r=a(20),t=Object(r.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"使用-dockerfile-定制镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-dockerfile-定制镜像"}},[e._v("#")]),e._v(" 使用 Dockerfile 定制镜像")]),e._v(" "),a("p",[e._v("Dockerfile 是一个文本文件，其内包含了一条条的 "),a("strong",[e._v("指令(Instruction)")]),e._v("，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。")]),e._v(" "),a("h2",{attrs:{id:"from-指定基础镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#from-指定基础镜像"}},[e._v("#")]),e._v(" FROM 指定基础镜像")]),e._v(" "),a("p",[e._v("所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。就像我们之前运行了一个 "),a("code",[e._v("nginx")]),e._v(" 镜像的容器，再进行修改一样，基础镜像是必须指定的。而 "),a("code",[e._v("FROM")]),e._v(" 就是指定 "),a("strong",[e._v("基础镜像")]),e._v("，因此一个 "),a("code",[e._v("Dockerfile")]),e._v(" 中 "),a("code",[e._v("FROM")]),e._v(" 是必备的指令，并且必须是第一条指令。")]),e._v(" "),a("p",[e._v("在 "),a("a",{attrs:{href:"https://hub.docker.com/search?q=&type=image&image_filter=official",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Hub"),a("OutboundLink")],1),e._v(" 上有非常多的高质量的官方镜像，有可以直接拿来使用的服务类的镜像，如 "),a("a",{attrs:{href:"https://hub.docker.com/_/nginx/",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("nginx")]),a("OutboundLink")],1),e._v("、"),a("a",{attrs:{href:"https://hub.docker.com/_/redis/",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("redis")]),a("OutboundLink")],1),e._v("、"),a("a",{attrs:{href:"https://hub.docker.com/_/mongo/",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("mongo")]),a("OutboundLink")],1),e._v("、"),a("a",{attrs:{href:"https://hub.docker.com/_/mysql/",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("mysql")]),a("OutboundLink")],1),e._v("、"),a("a",{attrs:{href:"https://hub.docker.com/_/httpd/",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("httpd")]),a("OutboundLink")],1),e._v("、"),a("a",{attrs:{href:"https://hub.docker.com/_/php/",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("php")]),a("OutboundLink")],1),e._v("、"),a("a",{attrs:{href:"https://hub.docker.com/_/tomcat/",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("tomcat")]),a("OutboundLink")],1),e._v(" 等；也有一些方便开发、构建、运行各种语言应用的镜像，如 "),a("a",{attrs:{href:"https://hub.docker.com/_/node",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("node")]),a("OutboundLink")],1),e._v("、"),a("a",{attrs:{href:"https://hub.docker.com/_/openjdk/",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("openjdk")]),a("OutboundLink")],1),e._v("、"),a("a",{attrs:{href:"https://hub.docker.com/_/python/",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("python")]),a("OutboundLink")],1),e._v("、"),a("a",{attrs:{href:"https://hub.docker.com/_/ruby/",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("ruby")]),a("OutboundLink")],1),e._v("、"),a("a",{attrs:{href:"https://hub.docker.com/_/golang/",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("golang")]),a("OutboundLink")],1),e._v(" 等。可以在其中寻找一个最符合我们最终目标的镜像为基础镜像进行定制。")]),e._v(" "),a("p",[e._v("如果没有找到对应服务的镜像，官方镜像中还提供了一些更为基础的操作系统镜像，如 "),a("a",{attrs:{href:"https://hub.docker.com/_/ubuntu/",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("ubuntu")]),a("OutboundLink")],1),e._v("、"),a("a",{attrs:{href:"https://hub.docker.com/_/debian/",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("debian")]),a("OutboundLink")],1),e._v("、"),a("a",{attrs:{href:"https://hub.docker.com/_/centos/",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("centos")]),a("OutboundLink")],1),e._v("、"),a("a",{attrs:{href:"https://hub.docker.com/_/fedora/",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("fedora")]),a("OutboundLink")],1),e._v("、"),a("a",{attrs:{href:"https://hub.docker.com/_/alpine/",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("alpine")]),a("OutboundLink")],1),e._v(" 等，这些操作系统的软件库为我们提供了更广阔的扩展空间。")]),e._v(" "),a("h2",{attrs:{id:"run-执行命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#run-执行命令"}},[e._v("#")]),e._v(" RUN 执行命令")]),e._v(" "),a("p",[a("code",[e._v("RUN")]),e._v(" 指令是用来执行命令行命令的。")]),e._v(" "),a("p",[e._v("其格式有两种：")]),e._v(" "),a("ul",[a("li",[a("em",[e._v("shell")]),e._v(" 格式："),a("code",[e._v("RUN <命令>")]),e._v("，就像直接在命令行中输入的命令一样。")])]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("RUN "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'<h1>Hello, Docker!</h1>'")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" /usr/share/nginx/html/index.html\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("ul",[a("li",[a("em",[e._v("exec")]),e._v(" 格式："),a("code",[e._v('RUN ["可执行文件", "参数1", "参数2"]')]),e._v("，这更像是函数调用中的格式。")])]),e._v(" "),a("p",[e._v("之前说过，Dockerfile 中每一个指令都会建立一层，"),a("code",[e._v("RUN")]),e._v(" 也不例外。每一个 "),a("code",[e._v("RUN")]),e._v(" 的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执行这些命令，执行结束后，"),a("code",[e._v("commit")]),e._v(" 这一层的修改，构成新的镜像。")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("错误示例")])])]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" debian:stretch")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" apt-get update")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" apt-get install -y gcc libc6-dev make wget")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" wget -O redis.tar.gz "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"http://download.redis.io/releases/redis-5.0.3.tar.gz"')])]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" mkdir -p /usr/src/redis")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" make -C /usr/src/redis")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" make -C /usr/src/redis install")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br")])]),a("p",[e._v("上面的这种写法，创建了 7 层镜像。这是完全没有意义的，而且很多运行时不需要的东西，都被装进了镜像里，比如编译环境、更新的软件包等等。结果就是产生非常臃肿、非常多层的镜像，不仅仅增加了构建部署的时间，也很容易出错。")]),e._v(" "),a("p",[a("em",[e._v("Union FS 是有最大层数限制的，比如 AUFS，曾经是最大不得超过 42 层，现在是不得超过 127 层。")])]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("最佳实践")])])]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" debian:stretch")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" set -x; buildDeps="),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'gcc libc6-dev make wget'")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("\\")]),e._v("\n    && apt-get update "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("\\")]),e._v("\n    && apt-get install -y "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$buildDeps")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("\\")]),e._v("\n    && wget -O redis.tar.gz "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"http://download.redis.io/releases/redis-5.0.3.tar.gz"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("\\")]),e._v("\n    && mkdir -p /usr/src/redis "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("\\")]),e._v("\n    && tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("\\")]),e._v("\n    && make -C /usr/src/redis "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("\\")]),e._v("\n    && make -C /usr/src/redis install "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("\\")]),e._v("\n    && rm -rf /var/lib/apt/lists/* "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("\\")]),e._v("\n    && rm redis.tar.gz "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("\\")]),e._v("\n    && rm -r /usr/src/redis "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("\\")]),e._v("\n    && apt-get purge -y --auto-remove "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$buildDeps")])]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br")])]),a("p",[e._v("首先，之前所有的命令只有一个目的，就是编译、安装 redis 可执行文件。因此没有必要建立很多层，这只是一层的事情。在撰写 Dockerfile 的时候，要经常提醒自己，这并不是在写 Shell 脚本，而是在定义每一层该如何构建。")]),e._v(" "),a("p",[e._v("并且，这里为了格式化还进行了换行。Dockerfile 支持 Shell 类的行尾添加 "),a("code",[e._v("\\")]),e._v(" 的命令换行方式，以及行首 "),a("code",[e._v("#")]),e._v(" 进行注释的格式。")]),e._v(" "),a("p",[e._v("此外，还可以看到这一组命令的最后添加了清理工作的命令，删除了为了编译构建所需要的软件，清理了所有下载、展开的文件，并且还清理了 "),a("code",[e._v("apt")]),e._v(" 缓存文件。这是很重要的一步，我们之前说过，镜像是多层存储，每一层的东西并不会在下一层被删除，会一直跟随着镜像。因此镜像构建时，一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。")]),e._v(" "),a("p",[e._v("很多人 Docker 初学者制作出很臃肿的镜像的原因之一，就是忘记了在每一层构建的最后一定要清理掉无关文件。")]),e._v(" "),a("h2",{attrs:{id:"构建镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构建镜像"}},[e._v("#")]),e._v(" 构建镜像")]),e._v(" "),a("p",[e._v("在 "),a("code",[e._v("Dockerfile")]),e._v(" 文件所在目录执行：")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" build -t nginx:v3 "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\nSending build context to Docker daemon "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2.048")]),e._v(" kB\nStep "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" FROM nginx\n ---"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" e43d811ce2f4\nStep "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" RUN "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'<h1>Hello, Docker!</h1>'")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" /usr/share/nginx/html/index.html\n ---"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" Running "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" 9cdc27646c7b\n ---"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" 44aa4490ce2c\nRemoving intermediate container 9cdc27646c7b\nSuccessfully built 44aa4490ce2c\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br")])]),a("p",[e._v("从命令的输出结果中，我们可以清晰的看到镜像的构建过程。在 "),a("code",[e._v("Step 2")]),e._v(" 中，"),a("code",[e._v("RUN")]),e._v(" 指令启动了一个容器 "),a("code",[e._v("9cdc27646c7b")]),e._v("，执行了所要求的命令，并最后提交了这一层 "),a("code",[e._v("44aa4490ce2c")]),e._v("，随后删除了所用到的这个容器 "),a("code",[e._v("9cdc27646c7b")]),e._v("。")]),e._v(" "),a("p",[e._v("这里我们使用了 "),a("code",[e._v("docker build")]),e._v(" 命令进行镜像构建。其格式为：")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" build "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("选项"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("上下文路径/URL/-"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("在这里我们指定了最终镜像的名称 "),a("code",[e._v("-t nginx:v3")])]),e._v(" "),a("h2",{attrs:{id:"镜像构建上下文-context"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#镜像构建上下文-context"}},[e._v("#")]),e._v(" 镜像构建上下文（Context）")]),e._v(" "),a("p",[e._v("如果注意，会看到 "),a("code",[e._v("docker build")]),e._v(" 命令最后有一个 "),a("code",[e._v(".")]),e._v("。"),a("code",[e._v(".")]),e._v(" 表示当前目录，而 "),a("code",[e._v("Dockerfile")]),e._v(" 就在当前目录，因此不少初学者以为这个路径是在指定 "),a("code",[e._v("Dockerfile")]),e._v(" 所在路径，这么理解其实是不准确的。如果对应上面的命令格式，你可能会发现，这是在指定 "),a("strong",[e._v("上下文路径")]),e._v("。那么什么是上下文呢？")]),e._v(" "),a("p",[e._v("首先我们要理解 "),a("code",[e._v("docker build")]),e._v(" 的工作原理。Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，被称为 "),a("a",{attrs:{href:"https://docs.docker.com/develop/sdk/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Remote API"),a("OutboundLink")],1),e._v("，而如 "),a("code",[e._v("docker")]),e._v(" 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 "),a("code",[e._v("docker")]),e._v(" 功能，但实际上，一切都是使用的远程调用形式在服务端（Docker 引擎）完成。也因为这种 C/S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。")]),e._v(" "),a("p",[e._v("当我们进行镜像构建的时候，并非所有定制都会通过 "),a("code",[e._v("RUN")]),e._v(" 指令完成，经常会需要将一些本地文件复制进镜像，比如通过 "),a("code",[e._v("COPY")]),e._v(" 指令、"),a("code",[e._v("ADD")]),e._v(" 指令等。而 "),a("code",[e._v("docker build")]),e._v(" 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。那么在这种客户端/服务端的架构中，如何才能让服务端获得本地文件呢？")]),e._v(" "),a("p",[e._v("这就引入了上下文的概念。当构建的时候，用户会指定构建镜像上下文的路径，"),a("code",[e._v("docker build")]),e._v(" 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。")]),e._v(" "),a("p",[e._v("如果在 "),a("code",[e._v("Dockerfile")]),e._v(" 中这么写：")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("COPY ./package.json /app/\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("就表示复制 "),a("strong",[e._v("上下文（context）")]),e._v(" 目录下的 "),a("code",[e._v("package.json")]),e._v("。")]),e._v(" "),a("p",[e._v("因此，"),a("code",[e._v("COPY")]),e._v(" 这类指令中的源文件的路径都是"),a("em",[e._v("相对路径")]),e._v("。这也是初学者经常会问的为什么 "),a("code",[e._v("COPY ../package.json /app")]),e._v(" 或者 "),a("code",[e._v("COPY /opt/xxxx /app")]),e._v(" 无法工作的原因，因为这些路径已经超出了上下文的范围，Docker 引擎无法获得这些位置的文件。如果真的需要那些文件，应该将它们复制到上下文目录中去。")]),e._v(" "),a("p",[e._v("现在就可以理解刚才的命令 "),a("code",[e._v("docker build -t nginx:v3 .")]),e._v(" 中的这个 "),a("code",[e._v(".")]),e._v("，实际上是在指定上下文的目录，"),a("code",[e._v("docker build")]),e._v(" 命令会将该目录下的内容打包交给 Docker 引擎以帮助构建镜像。")]),e._v(" "),a("p",[e._v("如果观察 "),a("code",[e._v("docker build")]),e._v(" 输出，我们其实已经看到了这个发送上下文的过程：")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" build -t nginx:v3 "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\nSending build context to Docker daemon "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2.048")]),e._v(" kB\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("理解构建上下文对于镜像构建是很重要的，避免犯一些不应该的错误。比如有些初学者在发现 "),a("code",[e._v("COPY /opt/xxxx /app")]),e._v(" 不工作后，于是干脆将 "),a("code",[e._v("Dockerfile")]),e._v(" 放到了硬盘根目录去构建，结果发现 "),a("code",[e._v("docker build")]),e._v(" 执行后，在发送一个几十 GB 的东西，极为缓慢而且很容易构建失败。那是因为这种做法是在让 "),a("code",[e._v("docker build")]),e._v(" 打包整个硬盘，这显然是使用错误。")]),e._v(" "),a("p",[e._v("一般来说，应该会将 "),a("code",[e._v("Dockerfile")]),e._v(" 置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用 "),a("code",[e._v(".gitignore")]),e._v(" 一样的语法写一个 "),a("code",[e._v(".dockerignore")]),e._v("，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。")]),e._v(" "),a("p",[e._v("在默认情况下，如果不额外指定 "),a("code",[e._v("Dockerfile")]),e._v(" 的话，会将上下文目录下的名为 "),a("code",[e._v("Dockerfile")]),e._v(" 的文件作为 Dockerfile。这只是默认行为，实际上 "),a("code",[e._v("Dockerfile")]),e._v(" 的文件名并不要求必须为 "),a("code",[e._v("Dockerfile")]),e._v("，而且并不要求必须位于上下文目录中，比如可以用 "),a("code",[e._v("-f ../Dockerfile.php")]),e._v(" 参数指定某个文件作为 "),a("code",[e._v("Dockerfile")]),e._v("。")]),e._v(" "),a("p",[e._v("当然，一般大家习惯性的会使用默认的文件名 "),a("code",[e._v("Dockerfile")]),e._v("，以及会将其置于镜像构建上下文目录中。")]),e._v(" "),a("h2",{attrs:{id:"dockerfile-指令详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-指令详解"}},[e._v("#")]),e._v(" Dockerfile 指令详解")]),e._v(" "),a("h3",{attrs:{id:"copy-复制文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#copy-复制文件"}},[e._v("#")]),e._v(" COPY 复制文件")]),e._v(" "),a("p",[e._v("格式：")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("COPY [--chown=<user>:<group>] <源路径>... <目标路径>")])]),e._v(" "),a("li",[a("code",[e._v('COPY [--chown=<user>:<group>] ["<源路径1>",... "<目标路径>"]')])])]),e._v(" "),a("p",[e._v("和 "),a("code",[e._v("RUN")]),e._v(" 指令一样，也有两种格式，一种类似于命令行，一种类似于函数调用。")]),e._v(" "),a("p",[a("code",[e._v("COPY")]),e._v(" 指令将从构建上下文目录中 "),a("code",[e._v("<源路径>")]),e._v(" 的文件/目录复制到新的一层的镜像内的 "),a("code",[e._v("<目标路径>")]),e._v(" 位置。比如：")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("COPY")]),e._v(" package.json /usr/src/app/")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[a("code",[e._v("<源路径>")]),e._v(" 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 "),a("a",{attrs:{href:"https://golang.org/pkg/path/filepath/#Match",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("filepath.Match")]),a("OutboundLink")],1),e._v(" 规则，如：")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("COPY")]),e._v(" hom* /mydir/")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("COPY")]),e._v(" hom?.txt /mydir/")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[a("code",[e._v("<目标路径>")]),e._v(" 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 "),a("code",[e._v("WORKDIR")]),e._v(" 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。")]),e._v(" "),a("p",[e._v("此外，还需要注意一点，使用 "),a("code",[e._v("COPY")]),e._v(" 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。")]),e._v(" "),a("p",[e._v("如果源路径为文件夹，复制的时候不是直接复制该文件夹，而是将文件夹中的内容复制到目标路径。")]),e._v(" "),a("h3",{attrs:{id:"add-更高级的复制文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-更高级的复制文件"}},[e._v("#")]),e._v(" ADD 更高级的复制文件")]),e._v(" "),a("p",[a("code",[e._v("ADD")]),e._v(" 指令和 "),a("code",[e._v("COPY")]),e._v(" 的格式和性质基本一致。")]),e._v(" "),a("p",[e._v("如果 "),a("code",[e._v("<源路径>")]),e._v(" 为一个 "),a("code",[e._v("tar")]),e._v(" 压缩文件的话，压缩格式为 "),a("code",[e._v("gzip")]),e._v(", "),a("code",[e._v("bzip2")]),e._v(" 以及 "),a("code",[e._v("xz")]),e._v(" 的情况下，"),a("code",[e._v("ADD")]),e._v(" 指令将会自动解压缩这个压缩文件到 "),a("code",[e._v("<目标路径>")]),e._v(" 去。")]),e._v(" "),a("p",[e._v("在 Docker 官方的 "),a("a",{attrs:{href:""}},[e._v("Dockerfile 最佳实践文档")]),e._v(" 中要求，尽可能的使用 "),a("code",[e._v("COPY")]),e._v("，因为 "),a("code",[e._v("COPY")]),e._v(" 的语义很明确，就是复制文件而已，而 "),a("code",[e._v("ADD")]),e._v(" 则包含了更复杂的功能，其行为也不一定很清晰。最适合使用 "),a("code",[e._v("ADD")]),e._v(" 的场合，就是所提及的需要自动解压缩的场合。")]),e._v(" "),a("p",[e._v("另外需要注意的是，"),a("code",[e._v("ADD")]),e._v(" 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。")]),e._v(" "),a("p",[e._v("因此在 "),a("code",[e._v("COPY")]),e._v(" 和 "),a("code",[e._v("ADD")]),e._v(" 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 "),a("code",[e._v("COPY")]),e._v(" 指令，仅在需要自动解压缩的场合使用 "),a("code",[e._v("ADD")]),e._v("。")]),e._v(" "),a("h3",{attrs:{id:"cmd-容器启动命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cmd-容器启动命令"}},[e._v("#")]),e._v(" CMD 容器启动命令")]),e._v(" "),a("p",[a("code",[e._v("CMD")]),e._v(" 指令用于指定容器主进程的默认启动命令。")]),e._v(" "),a("p",[e._v("类似于 "),a("code",[e._v("RUN")]),e._v(" 指令，用于运行程序，但二者运行的时间点不同:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("CMD")]),e._v(" 在"),a("code",[e._v("docker run")]),e._v(" 时运行。")]),e._v(" "),a("li",[a("code",[e._v("RUN")]),e._v(" 是在 "),a("code",[e._v("docker build")]),e._v("。")])]),e._v(" "),a("p",[a("code",[e._v("CMD")]),e._v(" 指令的格式和 "),a("code",[e._v("RUN")]),e._v(" 相似，也是两种格式：")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("shell")]),e._v(" 格式："),a("code",[e._v("CMD <命令>")])]),e._v(" "),a("li",[a("code",[e._v("exec")]),e._v(" 格式："),a("code",[e._v('CMD ["可执行文件", "参数1", "参数2"...]')])]),e._v(" "),a("li",[e._v("参数列表格式："),a("code",[e._v('CMD ["参数1", "参数2"...]')]),e._v("。在指定了 "),a("code",[e._v("ENTRYPOINT")]),e._v(" 指令后，用 "),a("code",[e._v("CMD")]),e._v(" 指定具体的参数。")])]),e._v(" "),a("p",[a("strong",[e._v("注意")]),e._v("：如果 Dockerfile 中如果存在多个 "),a("code",[e._v("CMD")]),e._v(" 指令，仅最后一个生效。")]),e._v(" "),a("p",[a("code",[e._v("CMD")]),e._v(" 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。比如，"),a("code",[e._v("ubuntu")]),e._v(" 镜像默认的 "),a("code",[e._v("CMD")]),e._v(" 是 "),a("code",[e._v("/bin/bash")]),e._v("，如果我们直接 "),a("code",[e._v("docker run -it ubuntu")]),e._v(" 的话，会直接进入 "),a("code",[e._v("bash")]),e._v("。我们也可以在运行时指定运行别的命令，如 "),a("code",[e._v("docker run -it ubuntu cat /etc/os-release")]),e._v("。这就是用 "),a("code",[e._v("cat /etc/os-release")]),e._v(" 命令替换了默认的 "),a("code",[e._v("/bin/bash")]),e._v(" 命令了，输出了系统版本信息。")]),e._v(" "),a("p",[e._v("在指令格式上，一般推荐使用 "),a("code",[e._v("exec")]),e._v(" 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 "),a("code",[e._v('"')]),e._v("，而不要使用单引号。")]),e._v(" "),a("p",[e._v("如果使用 "),a("code",[e._v("shell")]),e._v(" 格式的话，实际的命令会被包装为 "),a("code",[e._v("sh -c")]),e._v(" 的参数的形式进行执行。比如：")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("CMD")]),e._v(" echo "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$HOME")])]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("在实际执行中，会将其变更为：")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("CMD")]),e._v(" [ "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"sh"')]),e._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"-c"')]),e._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"echo $HOME"')]),e._v(" ]")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("这就是为什么我们可以使用环境变量的原因，因为这些环境变量会被 shell 进行解析处理。")]),e._v(" "),a("blockquote",[a("p",[e._v("提到 "),a("code",[e._v("CMD")]),e._v(" 就不得不提容器中应用在前台执行和后台执行的问题。这是初学者常出现的一个混淆。")]),e._v(" "),a("p",[e._v("Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 "),a("code",[e._v("systemd")]),e._v(" 去启动后台服务，容器内没有后台服务的概念。")]),e._v(" "),a("p",[e._v("一些初学者将 "),a("code",[e._v("CMD")]),e._v(" 写为：")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("CMD")]),e._v(" service nginx start")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("然后发现容器执行后就立即退出了。甚至在容器内去使用 "),a("code",[e._v("systemctl")]),e._v(" 命令结果却发现根本执行不了。这就是因为没有搞明白前台、后台的概念，没有区分容器和虚拟机的差异，依旧在以传统虚拟机的角度去理解容器。")]),e._v(" "),a("p",[e._v("对于容器而言，容器就是为了容器内的应用主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。")]),e._v(" "),a("p",[e._v("例如"),a("code",[e._v("CMD service nginx start")]),e._v(" 会被理解为 "),a("code",[e._v('CMD [ "sh", "-c", "service nginx start"]')]),e._v("，因此主进程实际上是 "),a("code",[e._v("sh")]),e._v("。那么当 "),a("code",[e._v("service nginx start")]),e._v(" 命令结束后，"),a("code",[e._v("sh")]),e._v(" 也就结束了，"),a("code",[e._v("sh")]),e._v(" 作为主进程退出了，自然就会令容器退出。")]),e._v(" "),a("p",[e._v("正确的做法是直接执行 "),a("code",[e._v("nginx")]),e._v(" 可执行文件，并且要求以前台形式运行。比如：")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("CMD")]),e._v(" ["),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"nginx"')]),e._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"-g"')]),e._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"daemon off;"')]),e._v("]")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])]),e._v(" "),a("h3",{attrs:{id:"entrypoint-入口点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#entrypoint-入口点"}},[e._v("#")]),e._v(" ENTRYPOINT 入口点")]),e._v(" "),a("p",[a("code",[e._v("ENTRYPOINT")]),e._v(" 的格式和 "),a("code",[e._v("RUN")]),e._v(" 指令格式一样，分为 "),a("code",[e._v("exec")]),e._v(" 格式和 "),a("code",[e._v("shell")]),e._v(" 格式。")]),e._v(" "),a("p",[a("code",[e._v("ENTRYPOINT")]),e._v(" 的目的和 "),a("code",[e._v("CMD")]),e._v(" 一样，都是在指定容器主进程启动命令及参数。"),a("code",[e._v("ENTRYPOINT")]),e._v(" 在运行时也可以替代，不过比 "),a("code",[e._v("CMD")]),e._v(" 要略显繁琐，需要通过 "),a("code",[e._v("docker run")]),e._v(" 的参数 "),a("code",[e._v("--entrypoint")]),e._v(" 来指定。")]),e._v(" "),a("p",[e._v("当指定了 "),a("code",[e._v("ENTRYPOINT")]),e._v(" 后，"),a("code",[e._v("CMD")]),e._v(" 的含义就发生了改变，不再是直接的运行其命令，而是将 "),a("code",[e._v("CMD")]),e._v(" 的内容作为参数传给 "),a("code",[e._v("ENTRYPOINT")]),e._v(" 指令，换句话说实际执行时，将变为：")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("ENTRYPOINT"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"<CMD>"')]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("那么有了 "),a("code",[e._v("CMD")]),e._v(" 后，为什么还要有 "),a("code",[e._v("ENTRYPOINT")]),e._v(" 呢？这种 "),a("code",[e._v('<ENTRYPOINT> "<CMD>"')]),e._v(" 有什么好处么？让我们来看下面的场景。")]),e._v(" "),a("h4",{attrs:{id:"场景-让镜像变成像命令一样使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景-让镜像变成像命令一样使用"}},[e._v("#")]),e._v(" 场景：让镜像变成像命令一样使用")]),e._v(" "),a("p",[e._v("假设我们需要一个得知自己当前公网 IP 的镜像，那么可以先用 "),a("code",[e._v("CMD")]),e._v(" 来实现：")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" ubuntu:18.04")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" apt-get update "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("\\")]),e._v("\n    && apt-get install -y curl "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("\\")]),e._v("\n    && rm -rf /var/lib/apt/lists/*")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("CMD")]),e._v(" [ "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"curl"')]),e._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"-s"')]),e._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"http://myip.ipip.net"')]),e._v(" ]")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("假如我们使用 "),a("code",[e._v("docker build -t myip .")]),e._v(" 来构建镜像的话，如果我们需要查询当前公网 IP，只需要执行：")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[e._v("$ docker run myip\n当前 IP：61.148.226.66 来自：北京市 联通\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("嗯，这么看起来好像可以直接把镜像当做命令使用了，不过命令总有参数，如果我们希望加参数呢？比如从上面的 "),a("code",[e._v("CMD")]),e._v(" 中可以看到实质的命令是 "),a("code",[e._v("curl")]),e._v("，那么如果我们希望显示 HTTP 头信息，就需要加上 "),a("code",[e._v("-i")]),e._v(" 参数。那么我们可以直接加 "),a("code",[e._v("-i")]),e._v(" 参数给 "),a("code",[e._v("docker run myip")]),e._v(" 么？")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[e._v('$ docker run myip -i\ndocker: Error response from daemon: invalid header field value "oci runtime error: container_linux.go:247: starting container process caused \\"exec: \\\\\\"-i\\\\\\": executable file not found in $PATH\\"\\n".\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("我们可以看到可执行文件找不到的报错，"),a("code",[e._v("executable file not found")]),e._v("。之前我们说过，"),a("strong",[e._v("跟在镜像名后面的是 "),a("code",[e._v("command")]),e._v("，运行时会替换 "),a("code",[e._v("CMD")]),e._v(" 的默认值")]),e._v("。因此这里的 "),a("code",[e._v("-i")]),e._v(" 替换了原来的 "),a("code",[e._v("CMD")]),e._v("，而不是添加在原来的 "),a("code",[e._v("curl -s http://myip.ipip.net")]),e._v(" 后面。而 "),a("code",[e._v("-i")]),e._v(" 根本不是命令，所以自然找不到。")]),e._v(" "),a("p",[e._v("那么如果我们希望加入 "),a("code",[e._v("-i")]),e._v(" 这参数，我们就必须重新完整的输入这个命令：")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[e._v("$ docker run myip curl -s http://myip.ipip.net -i\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("这显然不是很好的解决方案，而使用 "),a("code",[e._v("ENTRYPOINT")]),e._v(" 就可以解决这个问题。现在我们重新用 "),a("code",[e._v("ENTRYPOINT")]),e._v(" 来实现这个镜像：")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" ubuntu:18.04")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" apt-get update "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("\\")]),e._v("\n    && apt-get install -y curl "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("\\")]),e._v("\n    && rm -rf /var/lib/apt/lists/*")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ENTRYPOINT")]),e._v(" [ "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"curl"')]),e._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"-s"')]),e._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"http://myip.ipip.net"')]),e._v(" ]")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("这次我们再来尝试直接使用 "),a("code",[e._v("docker run myip -i")]),e._v("：")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[e._v("$ docker run myip\n当前 IP：61.148.226.66 来自：北京市 联通\n\n$ docker run myip -i\nHTTP/1.1 200 OK\nServer: nginx/1.8.0\nDate: Tue, 22 Nov 2016 05:12:40 GMT\nContent-Type: text/html; charset=UTF-8\nVary: Accept-Encoding\nX-Powered-By: PHP/5.6.24-1~dotdeb+7.1\nX-Cache: MISS from cache-2\nX-Cache-Lookup: MISS from cache-2:80\nX-Cache: MISS from proxy-2_6\nTransfer-Encoding: chunked\nVia: 1.1 cache-2:80, 1.1 proxy-2_6:8006\nConnection: keep-alive\n\n当前 IP：61.148.226.66 来自：北京市 联通\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br")])]),a("p",[e._v("可以看到，这次成功了。这是因为当存在 "),a("code",[e._v("ENTRYPOINT")]),e._v(" 后，"),a("code",[e._v("CMD")]),e._v(" 的内容将会作为参数传给 "),a("code",[e._v("ENTRYPOINT")]),e._v("，而这里 "),a("code",[e._v("-i")]),e._v(" 就是新的 "),a("code",[e._v("CMD")]),e._v("，因此会作为参数传给 "),a("code",[e._v("curl")]),e._v("，从而达到了我们预期的效果。")]),e._v(" "),a("p",[a("strong",[e._v("总结")])]),e._v(" "),a("blockquote",[a("ul",[a("li",[e._v("Dockfile中的 "),a("code",[e._v("CMD 指令")]),e._v(" 和 "),a("code",[e._v("ENTRYPOINT 指令")]),e._v(" 作用一样，都是用于定义容器主进程的启动命令")]),e._v(" "),a("li",[e._v("Dockfile中可以定义多条 "),a("code",[e._v("CMD 指令")]),e._v(" ，仅最后一个生效，"),a("code",[e._v("ENTRYPOINT 指令")]),e._v("也一样")]),e._v(" "),a("li",[a("code",[e._v("CMD 指令")]),e._v("和"),a("code",[e._v("ENTRYPOINT 指令")]),e._v("同时存在时，"),a("code",[e._v("CMD指令")]),e._v("指定的命令会被当做"),a("code",[e._v("ENTRYPOINT 指令")]),e._v("指定命令的参数，即 "),a("code",[e._v('<ENTRYPOINT> "<CMD>"')])]),e._v(" "),a("li",[e._v("docker run 命令后追加的 "),a("code",[e._v("command")]),e._v(" 可以覆盖CMD指令指定的命令（如果不存在"),a("code",[e._v("CMD 指令")]),e._v("就是新定义一个）")]),e._v(" "),a("li",[e._v("dockker run 命令后追加的 "),a("code",[e._v("command")]),e._v(" 也可以覆盖 "),a("code",[e._v("ENTRYPOINT 指令")]),e._v("指定的命令，不过要加 "),a("code",[e._v("--entrypoint")]),e._v("选项（如果不存在"),a("code",[e._v("ENTRYPOINT 指令")]),e._v("就是新定义一个）")])])]),e._v(" "),a("h3",{attrs:{id:"env-设置环境变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#env-设置环境变量"}},[e._v("#")]),e._v(" ENV 设置环境变量")]),e._v(" "),a("p",[e._v("格式有两种：")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ENV <key> <value>")])]),e._v(" "),a("li",[a("code",[e._v("ENV <key1>=<value1> <key2>=<value2>...")])])]),e._v(" "),a("p",[e._v("这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 "),a("code",[e._v("RUN")]),e._v("，还是运行时的应用，都可以直接使用这里定义的环境变量。")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ENV")]),e._v(" VERSION=1.0 DEBUG=on "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("\\")]),e._v("\n    NAME="),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Happy Feet"')])]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("这个例子中演示了如何换行，以及对含有空格的值用双引号括起来的办法，这和 Shell 下的行为是一致的。")]),e._v(" "),a("p",[e._v("下列指令可以支持环境变量展开： "),a("code",[e._v("ADD")]),e._v("、"),a("code",[e._v("COPY")]),e._v("、"),a("code",[e._v("ENV")]),e._v("、"),a("code",[e._v("EXPOSE")]),e._v("、"),a("code",[e._v("FROM")]),e._v("、"),a("code",[e._v("LABEL")]),e._v("、"),a("code",[e._v("USER")]),e._v("、"),a("code",[e._v("WORKDIR")]),e._v("、"),a("code",[e._v("VOLUME")]),e._v("、"),a("code",[e._v("STOPSIGNAL")]),e._v("、"),a("code",[e._v("ONBUILD")]),e._v("、"),a("code",[e._v("RUN")]),e._v("。")]),e._v(" "),a("p",[e._v("通过环境变量，我们可以让一份 "),a("code",[e._v("Dockerfile")]),e._v(" 制作更多的镜像，只需使用不同的环境变量即可。")]),e._v(" "),a("h3",{attrs:{id:"arg-构建参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arg-构建参数"}},[e._v("#")]),e._v(" ARG 构建参数")]),e._v(" "),a("p",[e._v("格式："),a("code",[e._v("ARG <参数名>[=<默认值>]")])]),e._v(" "),a("p",[e._v("构建参数和 "),a("code",[e._v("ENV")]),e._v(" 的效果一样，都是设置环境变量。所不同的是，"),a("code",[e._v("ARG")]),e._v(" 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 "),a("code",[e._v("ARG")]),e._v(" 保存密码之类的信息，因为 "),a("code",[e._v("docker history")]),e._v(" 还是可以看到所有值的。")]),e._v(" "),a("p",[a("code",[e._v("Dockerfile")]),e._v(" 中的 "),a("code",[e._v("ARG")]),e._v(" 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 "),a("code",[e._v("docker build")]),e._v(" 中用 "),a("code",[e._v("--build-arg <参数名>=<值>")]),e._v(" 来覆盖。")]),e._v(" "),a("p",[e._v("灵活的使用 "),a("code",[e._v("ARG")]),e._v(" 指令，能够在不修改 Dockerfile 的情况下，构建出不同的镜像。")]),e._v(" "),a("h3",{attrs:{id:"volume-定义匿名卷"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#volume-定义匿名卷"}},[e._v("#")]),e._v(" VOLUME 定义匿名卷")]),e._v(" "),a("p",[e._v("格式为：")]),e._v(" "),a("ul",[a("li",[a("code",[e._v('VOLUME ["<路径1>", "<路径2>"...]')])]),e._v(" "),a("li",[a("code",[e._v("VOLUME <路径>")])])]),e._v(" "),a("p",[e._v("之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 "),a("code",[e._v("Dockerfile")]),e._v(" 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("VOLUME")]),e._v(" /data")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("这里的 "),a("code",[e._v("/data")]),e._v(" 目录就会在容器运行时自动挂载为匿名卷，任何向 "),a("code",[e._v("/data")]),e._v(" 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行容器时可以覆盖这个挂载设置。比如：")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[e._v("$ docker run -d -v mydata:/data xxxx\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("在这行命令中，就使用了 "),a("code",[e._v("mydata")]),e._v(" 这个命名卷挂载到了 "),a("code",[e._v("/data")]),e._v(" 这个位置，替代了 "),a("code",[e._v("Dockerfile")]),e._v(" 中定义的匿名卷的挂载配置。")]),e._v(" "),a("h3",{attrs:{id:"expose-暴露端口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#expose-暴露端口"}},[e._v("#")]),e._v(" EXPOSE 暴露端口")]),e._v(" "),a("p",[e._v("格式为 "),a("code",[e._v("EXPOSE <端口1> [<端口2>...]")]),e._v("。")]),e._v(" "),a("p",[a("code",[e._v("EXPOSE")]),e._v(" 指令是声明容器运行时提供服务的端口，这只是一个声明，在容器运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 "),a("code",[e._v("docker run -P")]),e._v(" 时，会自动随机映射 "),a("code",[e._v("EXPOSE")]),e._v(" 的端口。")]),e._v(" "),a("p",[e._v("要将 "),a("code",[e._v("EXPOSE")]),e._v(" 和在运行时使用 "),a("code",[e._v("-p <宿主端口>:<容器端口>")]),e._v(" 区分开来。"),a("code",[e._v("-p")]),e._v("，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 "),a("code",[e._v("EXPOSE")]),e._v(" 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。")]),e._v(" "),a("h3",{attrs:{id:"workdir-指定工作目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#workdir-指定工作目录"}},[e._v("#")]),e._v(" WORKDIR 指定工作目录")]),e._v(" "),a("p",[e._v("格式为 "),a("code",[e._v("WORKDIR <工作目录路径>")]),e._v("。")]),e._v(" "),a("p",[e._v("使用 "),a("code",[e._v("WORKDIR")]),e._v(" 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如果该目录不存在，"),a("code",[e._v("WORKDIR")]),e._v(" 会帮你建立目录。")]),e._v(" "),a("p",[e._v("之前提到一些初学者常犯的错误是把 "),a("code",[e._v("Dockerfile")]),e._v(" 等同于 Shell 脚本来书写，这种错误的理解还可能会导致出现下面这样的错误：")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" cd /app")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" echo "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"hello"')]),e._v(" > world.txt")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("如果将这个 "),a("code",[e._v("Dockerfile")]),e._v(" 进行构建镜像运行后，会发现找不到 "),a("code",[e._v("/app/world.txt")]),e._v(" 文件，或者其内容不是 "),a("code",[e._v("hello")]),e._v("。原因其实很简单，在 Shell 中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态，会直接影响后一个命令；而在 "),a("code",[e._v("Dockerfile")]),e._v(" 中，这两行 "),a("code",[e._v("RUN")]),e._v(" 命令的执行环境根本不同，是两个完全不同的容器。这就是对 "),a("code",[e._v("Dockerfile")]),e._v(" 构建分层存储的概念不了解所导致的错误。")]),e._v(" "),a("p",[e._v("之前说过每一个 "),a("code",[e._v("RUN")]),e._v(" 都是启动一个容器、执行命令、然后提交存储层文件变更。第一层 "),a("code",[e._v("RUN cd /app")]),e._v(" 的执行仅仅是当前进程的工作目录变更，一个内存上的变化而已，其结果不会造成任何文件变更。而到第二层的时候，启动的是一个全新的容器，跟第一层的容器更完全没关系，自然不可能继承前一层构建过程中的内存变化。")]),e._v(" "),a("p",[e._v("因此如果需要改变以后各层的工作目录的位置，那么应该使用 "),a("code",[e._v("WORKDIR")]),e._v(" 指令。")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("WORKDIR")]),e._v(" /app")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" echo "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"hello"')]),e._v(" > world.txt")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("h3",{attrs:{id:"user-指定当前用户"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#user-指定当前用户"}},[e._v("#")]),e._v(" USER 指定当前用户")]),e._v(" "),a("p",[e._v("格式："),a("code",[e._v("USER <用户名>[:<用户组>]")])]),e._v(" "),a("p",[a("code",[e._v("USER")]),e._v(" 指令和 "),a("code",[e._v("WORKDIR")]),e._v(" 相似，都是改变环境状态并影响以后的层。"),a("code",[e._v("WORKDIR")]),e._v(" 是改变工作目录，"),a("code",[e._v("USER")]),e._v(" 则是改变之后层的执行 "),a("code",[e._v("RUN")]),e._v(", "),a("code",[e._v("CMD")]),e._v(" 以及 "),a("code",[e._v("ENTRYPOINT")]),e._v(" 这类命令的身份。")]),e._v(" "),a("p",[e._v("注意，"),a("code",[e._v("USER")]),e._v(" 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" groupadd -r redis && useradd -r -g redis redis")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("USER")]),e._v(" redis")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" [ "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"redis-server"')]),e._v(" ]")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("h3",{attrs:{id:"label-为镜像添加元数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#label-为镜像添加元数据"}},[e._v("#")]),e._v(" LABEL 为镜像添加元数据")]),e._v(" "),a("p",[a("code",[e._v("LABEL")]),e._v(" 指令用来给镜像以键值对的形式添加一些元数据（metadata）。")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("LABEL")]),e._v(" <key>=<value> <key>=<value> <key>=<value> ...")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h1",{attrs:{id:"数据管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据管理"}},[e._v("#")]),e._v(" 数据管理")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://yeasy.gitbook.io/~/files/v0/b/gitbook-28427.appspot.com/o/assets%2F-M5xTVjmK7ax94c8ZQcm%2F-M5xT_hHX2g5ldlyp9nm%2F-M5xTvFu-HKnW-LAS2dT%2Ftypes-of-mounts.png?generation=1588021950620135&alt=media",alt:"img"}})]),e._v(" "),a("p",[e._v("在容器中管理数据主要有两种方式：")]),e._v(" "),a("ul",[a("li",[e._v("数据卷（Volumes）")]),e._v(" "),a("li",[e._v("挂载主机目录 (Bind mounts)")])]),e._v(" "),a("h2",{attrs:{id:"数据卷"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据卷"}},[e._v("#")]),e._v(" 数据卷")]),e._v(" "),a("p",[a("code",[e._v("数据卷（Volumes）")]),e._v(" ：Docker在宿主机文件系统默认开辟的一片空间，默认位于 /var/lib/docker/volumes 目录中；")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://img2018.cnblogs.com/blog/381412/201908/381412-20190808225451807-827316452.png",alt:"img"}})]),e._v(" "),a("p",[e._v("由上图可以知道，目前所有Container的数据都保存在了这个目录下边，由于没有在创建时指定卷，所以Docker帮我们默认创建许多匿名（就上面这一堆很长ID的名字）卷。")]),e._v(" "),a("h3",{attrs:{id:"创建一个数据卷-具名数据卷"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建一个数据卷-具名数据卷"}},[e._v("#")]),e._v(" 创建一个数据卷（具名数据卷）")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[e._v("$ docker volume create my-vol\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("查看所有的 "),a("code",[e._v("数据卷")])]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[e._v("$ docker volume ls\n\nDRIVER              VOLUME NAME\nlocal               my-vol\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("在主机里使用以下命令可以查看指定 "),a("code",[e._v("数据卷")]),e._v(" 的信息")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[e._v('$ docker volume inspect my-vol\n[\n    {\n        "Driver": "local",\n        "Labels": {},\n        "Mountpoint": "/var/lib/docker/volumes/my-vol/_data",\n        "Name": "my-vol",\n        "Options": {},\n        "Scope": "local"\n    }\n]\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br")])]),a("h3",{attrs:{id:"启动一个挂载数据卷的容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动一个挂载数据卷的容器"}},[e._v("#")]),e._v(" 启动一个挂载数据卷的容器")]),e._v(" "),a("p",[e._v("在用 "),a("code",[e._v("docker run")]),e._v(" 命令的时候，使用 "),a("code",[e._v("--mount")]),e._v(" 标记来将 "),a("code",[e._v("数据卷")]),e._v(" 挂载到容器里。在一次 "),a("code",[e._v("docker run")]),e._v(" 中可以挂载多个 "),a("code",[e._v("数据卷")]),e._v("。")]),e._v(" "),a("p",[e._v("下面创建一个名为 "),a("code",[e._v("web")]),e._v(" 的容器，并加载一个 "),a("code",[e._v("数据卷")]),e._v(" 到容器的 "),a("code",[e._v("/usr/share/nginx/html")]),e._v(" 目录。")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[e._v("$ docker run -d -P \\\n    --name web \\\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# -v my-vol:/usr/share/nginx/html \\")]),e._v("\n    --mount source=my-vol,target=/usr/share/nginx/html \\\n    nginx:alpine\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("注意：如果挂载数据卷时直接指定容器中目录，不指定挂载数据卷名，那么就会挂在一个匿名数据卷，不管是具名数据卷还是匿名数据卷，默认都位于/var/lib/docker/volume/中")]),e._v(" "),a("h3",{attrs:{id:"查看数据卷的具体信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看数据卷的具体信息"}},[e._v("#")]),e._v(" 查看数据卷的具体信息")]),e._v(" "),a("p",[e._v("在主机里使用以下命令可以查看 "),a("code",[e._v("web")]),e._v(" 容器的信息")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[e._v("$ docker inspect web\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[a("code",[e._v("数据卷")]),e._v(' 信息在 "Mounts" Key 下面')]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[e._v('"Mounts": [\n    {\n        "Type": "volume",\n        "Name": "my-vol",\n        "Source": "/var/lib/docker/volumes/my-vol/_data",\n        "Destination": "/usr/share/nginx/html",\n        "Driver": "local",\n        "Mode": "",\n        "RW": true,\n        "Propagation": ""\n    }\n],\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br")])]),a("h3",{attrs:{id:"删除数据卷"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除数据卷"}},[e._v("#")]),e._v(" 删除数据卷")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[e._v("$ docker volume rm my-vol\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[a("strong",[a("code",[e._v("数据卷")]),e._v(" 是被设计用来持久化数据的，它的生命周期独立于容器，Docker 不会在容器被删除后自动删除 "),a("code",[e._v("数据卷")]),e._v("。如果需要在删除容器的同时移除数据卷。可以在删除容器的时候使用 "),a("code",[e._v("docker rm -v")]),e._v(" 这个命令。")])]),e._v(" "),a("p",[e._v("无主的数据卷可能会占据很多空间，要清理请使用以下命令")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[e._v("$ docker volume prune\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h2",{attrs:{id:"挂载主机目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#挂载主机目录"}},[e._v("#")]),e._v(" 挂载主机目录")]),e._v(" "),a("h3",{attrs:{id:"挂载一个主机目录作为数据卷"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#挂载一个主机目录作为数据卷"}},[e._v("#")]),e._v(" 挂载一个主机目录作为数据卷")]),e._v(" "),a("p",[e._v("使用 "),a("code",[e._v("--mount")]),e._v(" 标记可以指定挂载一个本地主机的目录到容器中去。")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[e._v("$ docker run -d -P \\\n    --name web \\\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# -v /src/webapp:/usr/share/nginx/html \\")]),e._v("\n    --mount type=bind,source=/src/webapp,target=/usr/share/nginx/html \\\n    nginx:alpine\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("上面的命令挂载主机的 "),a("code",[e._v("/src/webapp")]),e._v(" 目录到容器的 "),a("code",[e._v("/usr/share/nginx/html")]),e._v("目录。这个功能在进行测试的时候十分方便，比如用户可以放置一些程序到本地目录中，来查看容器是否正常工作。")]),e._v(" "),a("p",[e._v("本地目录的路径必须是绝对路径，使用 "),a("code",[e._v("-v")]),e._v(" 参数时如果本地目录不存在 Docker 会自动为你创建一个文件夹，使用 "),a("code",[e._v("--mount")]),e._v(" 参数时如果本地目录不存在，Docker 会报错。")]),e._v(" "),a("p",[e._v("Docker 挂载主机目录的默认权限是 "),a("code",[e._v("读写")]),e._v("，用户也可以通过增加 "),a("code",[e._v("readonly")]),e._v(" 指定为 "),a("code",[e._v("只读")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[e._v("$ docker run -d -P \\\n    --name web \\\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# -v /src/webapp:/usr/share/nginx/html:ro \\")]),e._v("\n    --mount type=bind,source=/src/webapp,target=/usr/share/nginx/html,readonly \\\n    nginx:alpine\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("加了 "),a("code",[e._v("readonly")]),e._v(" 之后，就挂载为 "),a("code",[e._v("只读")]),e._v(" 了。如果你在容器内 "),a("code",[e._v("/usr/share/nginx/html")]),e._v(" 目录新建文件，会显示如下错误")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[e._v("/usr/share/nginx/html # touch new.txt\ntouch: new.txt: Read-only file system\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("h3",{attrs:{id:"查看数据卷的具体信息-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看数据卷的具体信息-2"}},[e._v("#")]),e._v(" 查看数据卷的具体信息")]),e._v(" "),a("p",[e._v("在主机里使用以下命令可以查看 "),a("code",[e._v("web")]),e._v(" 容器的信息")]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[e._v("$ docker inspect web\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[a("code",[e._v("挂载主机目录")]),e._v(' 的配置信息在 "Mounts" Key 下面')]),e._v(" "),a("div",{staticClass:"language-dockerfile line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[e._v('"Mounts": [\n    {\n        "Type": "bind",\n        "Source": "/src/webapp",\n        "Destination": "/usr/share/nginx/html",\n        "Mode": "",\n        "RW": true,\n        "Propagation": "rprivate"\n    }\n],\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);