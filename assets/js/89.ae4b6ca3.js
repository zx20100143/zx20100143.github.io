(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{569:function(t,a,s){"use strict";s.r(a);var e=s(20),l=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"一、i-o-模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、i-o-模型"}},[t._v("#")]),t._v(" 一、I/O 模型")]),t._v(" "),s("p",[t._v("一个输入操作通常包括两个阶段：")]),t._v(" "),s("ul",[s("li",[t._v("等待数据准备好")]),t._v(" "),s("li",[t._v("从内核向进程复制数据")])]),t._v(" "),s("p",[t._v("对于一个套接字上的输入操作，第一步通常涉及等待数据从网络中到达。当所等待数据到达时，它被复制到内核中的某个缓冲区。第二步就是把数据从内核缓冲区复制到应用进程缓冲区。")]),t._v(" "),s("p",[t._v("Unix 有五种 I/O 模型：")]),t._v(" "),s("ul",[s("li",[t._v("阻塞式 I/O")]),t._v(" "),s("li",[t._v("非阻塞式 I/O")]),t._v(" "),s("li",[t._v("I/O 复用（select 和 poll）")]),t._v(" "),s("li",[t._v("信号驱动式 I/O（SIGIO）")]),t._v(" "),s("li",[t._v("异步 I/O（AIO）")])]),t._v(" "),s("h3",{attrs:{id:"_1-阻塞式-i-o-bio"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-阻塞式-i-o-bio"}},[t._v("#")]),t._v(" 1. 阻塞式 I/O（BIO）")]),t._v(" "),s("p",[t._v("应用进程被阻塞，直到数据从内核缓冲区复制到应用进程缓冲区中才返回。")]),t._v(" "),s("p",[t._v("应该注意到，在阻塞的过程中，其它应用进程还可以执行，因此阻塞不意味着整个操作系统都被阻塞。因为其它应用进程还可以执行，所以不消耗 CPU 时间，这种模型的 CPU 利用率会比较高。")]),t._v(" "),s("p",[t._v("下图中，recvfrom() 用于接收 Socket 传来的数据，并复制到应用进程的缓冲区 buf 中。这里把 recvfrom() 当成系统调用。")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ssize_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("recvfrom")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sockfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("src_addr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("socklen_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("addrlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"http://image-blog-zx00143.test.upcdn.net/image/image-20220203185550482.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"_2-非阻塞式-i-o"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-非阻塞式-i-o"}},[t._v("#")]),t._v(" 2. 非阻塞式 I/O")]),t._v(" "),s("p",[t._v("应用进程执行系统调用之后，内核返回一个错误码。应用进程可以继续执行，但是需要不断的执行系统调用来获知 I/O 是否完成，这种方式称为轮询（polling）。")]),t._v(" "),s("p",[t._v("由于 CPU 要处理更多的系统调用，因此这种模型的 CPU 利用率比较低。")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://image-blog-zx00143.test.upcdn.net/image/image-20220203185637176.png",alt:"image-20220203185637176"}})]),t._v(" "),s("h3",{attrs:{id:"_3-i-o-多路-复用-nio"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-i-o-多路-复用-nio"}},[t._v("#")]),t._v(" 3. I/O （多路）复用（NIO）")]),t._v(" "),s("p",[s("mark",[t._v("使用 select 或者 poll 等待数据，并且可以等待多个套接字中的任何一个变为可读。这一过程会被阻塞，当某一个套接字可读时返回，之后再使用 recvfrom 把数据从内核复制到进程中。")])]),t._v(" "),s("p",[s("mark",[t._v("它可以让单个进程具有处理多个 I/O 事件的能力。又被称为 Event Driven I/O，即事件驱动 I/O。")])]),t._v(" "),s("p",[t._v("如果一个 Web 服务器没有 I/O 复用，那么每一个 Socket 连接都需要创建一个线程去处理。如果同时有几万个连接，那么就需要创建相同数量的线程。"),s("mark",[t._v("相比于多进程和多线程技术，I/O 复用不需要进程线程创建和切换的开销，系统开销更小。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"http://image-blog-zx00143.test.upcdn.net/image/image-20220203185650553.png",alt:"image-20220203185650553"}})]),t._v(" "),s("h3",{attrs:{id:"_4-信号驱动-i-o"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-信号驱动-i-o"}},[t._v("#")]),t._v(" 4. 信号驱动 I/O")]),t._v(" "),s("p",[t._v("应用进程使用 sigaction 系统调用，内核立即返回，应用进程可以继续执行，也就是说等待数据阶段应用进程是非阻塞的。内核在数据到达时向应用进程发送 SIGIO 信号，应用进程收到之后在信号处理程序中调用 recvfrom 将数据从内核复制到应用进程中。")]),t._v(" "),s("p",[t._v("相比于非阻塞式 I/O 的轮询方式，信号驱动 I/O 的 CPU 利用率更高。")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://image-blog-zx00143.test.upcdn.net/image/image-20220203185703760.png",alt:"image-20220203185703760"}})]),t._v(" "),s("h3",{attrs:{id:"_5-异步-i-o-aio"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-异步-i-o-aio"}},[t._v("#")]),t._v(" 5. 异步 I/O（AIO）")]),t._v(" "),s("p",[t._v("应用进程执行 aio_read 系统调用会立即返回，应用进程可以继续执行，不会被阻塞，内核会在所有操作完成之后向应用进程发送信号。")]),t._v(" "),s("p",[s("mark",[t._v("异步 I/O 与信号驱动 I/O 的区别在于，异步 I/O 的信号是通知应用进程 I/O 完成，而信号驱动 I/O 的信号是通知应用进程可以开始 I/O。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"http://image-blog-zx00143.test.upcdn.net/image/image-20220203185713343.png",alt:"image-20220203185713343"}})]),t._v(" "),s("h3",{attrs:{id:"五大-i-o-模型比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五大-i-o-模型比较"}},[t._v("#")]),t._v(" 五大 I/O 模型比较")]),t._v(" "),s("ul",[s("li",[t._v("同步 I/O：将数据从内核缓冲区复制到应用进程缓冲区的阶段，应用进程会阻塞。")]),t._v(" "),s("li",[t._v("异步 I/O：不会阻塞。")])]),t._v(" "),s("p",[t._v("阻塞式 I/O、非阻塞式 I/O、I/O 复用和信号驱动 I/O 都是同步 I/O，它们的主要区别在第一个阶段。")]),t._v(" "),s("p",[t._v("非阻塞式 I/O 、信号驱动 I/O 和异步 I/O 在第一阶段不会阻塞。")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://image-blog-zx00143.test.upcdn.net/image/image-20220203185733794.png",alt:"image-20220203185733794"}})]),t._v(" "),s("h1",{attrs:{id:"二、i-o-多路-复用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、i-o-多路-复用"}},[t._v("#")]),t._v(" 二、I/O （多路）复用")]),t._v(" "),s("p",[t._v("select/poll/epoll 都是 I/O 多路复用的具体实现，select 出现的最早，之后是 poll，再是 epoll。")]),t._v(" "),s("h2",{attrs:{id:"_1-select-poll比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-select-poll比较"}},[t._v("#")]),t._v(" 1. select/poll比较")]),t._v(" "),s("h4",{attrs:{id:"i-功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#i-功能"}},[t._v("#")]),t._v(" I. 功能")]),t._v(" "),s("p",[t._v("select 和 poll 的功能基本相同，不过在一些实现细节上有所不同。")]),t._v(" "),s("ul",[s("li",[t._v("select 会修改描述符，而 poll 不会；")]),t._v(" "),s("li",[s("mark",[t._v("select 的描述符类型使用数组实现，FD_SETSIZE 大小默认为 1024，因此默认只能监听 1024 个描述符。")]),t._v(" 如果要监听更多描述符的话，需要修改 FD_SETSIZE 之后重新编译；"),s("mark",[t._v("而 poll 的描述符类型使用链表实现，没有描述符数量的限制；")])]),t._v(" "),s("li",[t._v("poll 提供了更多的事件类型，并且对描述符的重复利用上比 select 高。")]),t._v(" "),s("li",[t._v("如果一个线程对某个描述符调用了 select 或者 poll，另一个线程关闭了该描述符，会导致调用结果不确定。")])]),t._v(" "),s("h4",{attrs:{id:"ii-速度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ii-速度"}},[t._v("#")]),t._v(" II. 速度")]),t._v(" "),s("p",[t._v("select 和 poll 速度都比较慢。")]),t._v(" "),s("ul",[s("li",[t._v("select 和 poll 每次调用都需要将全部描述符从应用进程缓冲区复制到内核缓冲区。")]),t._v(" "),s("li",[s("mark",[t._v("select 和 poll 的返回结果中没有声明哪些描述符已经准备好，所以如果返回值大于 0 时，应用进程都需要使用轮询的方式来找到 I/O 完成的描述符")]),t._v("。")])]),t._v(" "),s("div",{staticClass:"language-text line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h4",{attrs:{id:"_3-可移植性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-可移植性"}},[t._v("#")]),t._v(" 3. 可移植性")]),t._v(" "),s("p",[t._v("几乎所有的系统都支持 select，但是只有比较新的系统支持 poll。")]),t._v(" "),s("h2",{attrs:{id:"_2-epoll"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-epoll"}},[t._v("#")]),t._v(" 2. epoll")]),t._v(" "),s("p",[t._v("epoll 只需要将描述符从进程缓冲区向内核缓冲区拷贝一次，并且进程不需要通过轮询来获得事件完成的描述符。")]),t._v(" "),s("p",[t._v("epoll 仅适用于 Linux OS。")]),t._v(" "),s("p",[t._v("epoll 比 select 和 poll 更加灵活而且没有描述符数量限制。")]),t._v(" "),s("p",[t._v("epoll 对多线程编程更有友好，一个线程调用了 epoll_wait() 另一个线程关闭了同一个描述符也不会产生像 select 和 poll 的不确定情况。")]),t._v(" "),s("h2",{attrs:{id:"_3-应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-应用场景"}},[t._v("#")]),t._v(" 3. 应用场景")]),t._v(" "),s("p",[t._v("很容易产生一种错觉认为只要用 epoll 就可以了，select 和 poll 都已经过时了，其实它们都有各自的使用场景。")]),t._v(" "),s("h4",{attrs:{id:"i-select-应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#i-select-应用场景"}},[t._v("#")]),t._v(" I. select 应用场景")]),t._v(" "),s("p",[t._v("select 的 timeout 参数精度为 1ns，而 poll 和 epoll 为 1ms，因此 select 更加适用于实时性要求比较高的场景，比如核反应堆的控制。")]),t._v(" "),s("p",[t._v("select 可移植性更好，几乎被所有主流平台所支持。")]),t._v(" "),s("h4",{attrs:{id:"ii-poll-应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ii-poll-应用场景"}},[t._v("#")]),t._v(" II. poll 应用场景")]),t._v(" "),s("p",[t._v("poll 没有最大描述符数量的限制，如果平台支持并且对实时性要求不高，应该使用 poll 而不是 select。")]),t._v(" "),s("h4",{attrs:{id:"iii-epoll-应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#iii-epoll-应用场景"}},[t._v("#")]),t._v(" III. epoll 应用场景")]),t._v(" "),s("p",[t._v("只需要运行在 Linux 平台上，有大量的描述符需要同时轮询，并且这些连接最好是长连接。")]),t._v(" "),s("p",[t._v("需要同时监控小于 1000 个描述符，就没有必要使用 epoll，因为这个应用场景下并不能体现 epoll 的优势。")]),t._v(" "),s("p",[t._v("需要监控的描述符状态变化多，而且都是非常短暂的，也没有必要使用 epoll。因为 epoll 中的所有描述符都存储在内核中，造成每次需要对描述符的状态改变都需要通过 epoll_ctl() 进行系统调用，频繁系统调用降低效率。并且 epoll 的描述符存储在内核，不容易调试。")])])}),[],!1,null,null,null);a.default=l.exports}}]);